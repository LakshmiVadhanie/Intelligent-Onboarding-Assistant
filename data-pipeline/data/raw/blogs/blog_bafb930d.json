{
  "content": "Artificial intelligence (AI) can accelerate development by generating code,\ndebugging, and automating routine tasks. But on its own, itâs limited to\ntrained data or public sources, while developers often need access to\ninternal systems like project trackers, dashboards, databases, design files\nin Figma, or documents in Google Drive.\nNow integrated into\nGitLab Duo Agent Platform\n, the Model Context Protocol (\nMCP\n) gives AI secure access to internal tools so developers can get comprehensive assistance directly within their workflows.\nWhat is MCP?\nMCP, first introduced by Anthropic in 2024, is an open standard that connects AI with data and tools. It works as a secure two-way channel: MCP clients (AI applications, autonomous agents, or development tools) request data or actions, and MCP servers provide trusted, authorized responses from their connected data sources.\nMCP servers act as secure bridges to various systems: They can connect to databases, APIs, file systems, cloud services, or any external tool to retrieve and provide data. This enables AI tools and agents to go beyond their initial training data by allowing them to access real-time information and execute actions, such as rescheduling meetings or checking calendar availability, while maintaining strict security, privacy, and audit controls.\nWhy AI use MCP instead of APIs?\nYou may ask: Why use MCP if AI can already call system APIs directly? The challenge is that each API has its own authentication, data formats, and behaviors, which would require AI to use custom connectors for every system and continuously maintain them as APIs evolve, making direct integrations complex and error-prone. MCP addresses this by providing a standardized, secure interface that handles authentication, permissions, and data translation. This enables AI tools to connect reliably to any system, while simplifying integration and ensuring consistent, safe behavior.\nGitLab's MCP support\nGitLab extends\nDuo Agentic Chat\nwith MCP support, shattering the barriers that previously isolated AI from the tools developers use every day. This empowers developers to access their entire toolkit directly from their favorite IDE, in natural language, enabling GitLab Duo Agent Platform to deliver comprehensive assistance without breaking developer flow or forcing disruptive context switches.\nGitLab provides comprehensive MCP support through two complementary workflows:\nMCP client workflow\n:\nDuo Agent Platform serves as an MCP client, allowing features to access various external tools and services.\nMCP server workflow\n:\nGitLab also provides MCP server capabilities, enabling AI tools and applications like Claude Desktop, Cursor, and other MCP-compatible tools to connect securely to your GitLab instance.\nInteractive walkthrough demo of the MCP client workflow\nPicture this common Monday morning scenario:\nYour company's checkout service is throwing timeout errors. Customers can't complete purchases, and you need to investigate fast. Normally, you'd open Jira to review the incident ticket, scroll through Slack for updates, and check Grafana dashboards for error spikes. With GitLab's MCP support, you can do all of this in natural language directly from the chat in your IDE. MCP correlates data across all your systems, giving you the full picture instantly, without leaving your development workflow.\nTo experience this capability firsthand, we've created an\ninteractive walkthrough\nillustrating the payment service scenario above. Click the image below to start the demo.\nSetting up GitLab MCP client\nBefore you can start querying data through\nGitLab Duo Agentic Chat\nor the\nsoftware development flow\n, you need to configure MCP in your development environment. The steps include:\nTurn on Feature preview\nâ In your Group settings, navigate to\nGitLab Duo\nin the left sidebar, then check the box for \"Turn on experiment and beta GitLab Duo features\" under the\nFeature preview\nsection.\nTurn on MCP for your group\nâ Enable MCP support in your GitLab group settings to allow Duo features to connect to external systems.\nSet up MCP servers\nâ Define the MCP servers in JSON format in the\nmcp.json\nfile. Create the file in this location:\nWindows:\nC:\\Users\\<username>\\AppData\\Roaming\\GitLab\\duo\\mcp.json\nAll other operating systems:\n~/.gitlab/duo/mcp.json\nFor workspace-specific configurations, see\nworkspace configuration setup\n.\n{\n\"mcpServers\": {\n\"server-name\": {\n\"type\": \"stdio\",\n\"command\": \"path/to/server\",\n\"args\": [\"--arg1\", \"value1\"],\n\"env\": {\n\"ENV_VAR\": \"value\"\n}\n},\n\"http-server\": {\n\"type\": \"http\",\n\"url\": \"http://localhost:3000/mcp\"\n},\n\"sse-server\": {\n\"type\": \"sse\",\n\"url\": \"http://localhost:3000/mcp/sse\"\n}\n}\n}\nInstall and configure your IDE â Ensure VSCodium or Visual Studio Code is installed along with the GitLab Workflow extension (Version 6.28.2 or later for basic MCP support, 6.35.6 or later for full support).\nFor full step-by-step instructions, configuration examples, and troubleshooting tips, see the\nGitLab MCP clients documentation\n.\nExample project\nTo complement the walkthrough, we are sharing the project that served as its\nfoundation\n. This project allows you to reproduce the same flow in your own environment and explore GitLab's MCP capabilities hands-on.\nIt demonstrates MCP functionality in a simulated enterprise setup, using mock data from Jira, Slack, and Grafana to model an incident response scenario. The included\nmcp.json\nconfiguration shows how to connect to a local MCP server (\nenterprise-data-v2\n) or optionally extend the setup with AWS services for cloud integration.\n{\n\"mcpServers\": {\n\"enterprise-data-v2\": {\n\"type\": \"stdio\",\n\"command\": \"node\",\n\"args\": [\"src/server.js\"],\n\"cwd\": \"/path/to/your/project\"\n},\n\"aws-knowledge\": {\n\"type\": \"stdio\"\n\"command\": \"npx\",\n\"args\": [\"mcp-remote\", \"https://knowledge-mcp.global.api.aws\"]\n},\n\"aws-console\": {\n\"type\": \"stdio\"\n\"command\": \"npx\",\n\"args\": [\"@imazhar101/mcp-aws-server\"],\n\"env\": {\n\"AWS_REGION\": \"YOUR_REGION\",\n\"AWS_PROFILE\": \"default\"\n}\n}\n}\n}\nSecurity note:\nThe\naws-console\nuses a community-developed MCP server package (\n@imazhar101/mcp-aws-server\n) for AWS integration that has not been independently verified.\nThis is intended for demonstration and learning purposes only. For production use, evaluate packages thoroughly or use official alternatives.\nAdditionally, configure AWS credentials using AWS CLI profiles or IAM roles rather than hardcoding them in the configuration file. The AWS SDK will automatically discover credentials from your environment, which is the recommended approach for enterprise governance and security compliance.\nTo get started,\nclone the project\n, install dependencies with\nnpm install\n, then start the local MCP server with\nnpm start\n. Create an\n~/.gitlab/duo/mcp.json\nfile with the configuration above, update the file path to match your local setup, and restart VS Code to load the MCP configuration. Optionally, add your AWS credentials to experience live cloud integration.\nClone the project here:\nGitLab Duo MCP Demo\n.\nExample prompts to try with the demo project\nOnce you've configured the example project, you can start exploring your data and tools directly from GitLab Duo Agentic Chat in your IDE. Here are some prompts you can try:\n\"What tools can you access through MCP?\"\n\"Show me recent Slack discussions about the database issues.\"\nGitLab MCP server capabilities\nSo far, we've looked at how GitLab Duo Agent Platform acts as an MCP client, connecting to external MCP servers. Now, let's explore the GitLab MCP server capabilities.\nThe GitLab MCP server lets AI tools like Cursor or Claude Desktop connect securely to your GitLab instance and work with your development data through natural language. Authentication is handled through OAuth 2.0 Dynamic Client Registration, so AI tools can register automatically and access your GitLab data with proper authorization.\nCurrently, the server supports:\nIssues\nâ get details or create new issues\nMerge requests\nâ view details, commits, and file changes\nPipelines\nâ list jobs and pipelines for merge requests\nServer info\nâ check the MCP server version\nFor the complete list of available tools and capabilities, see the\nMCP server docs\n.\nInteractive walkthrough: GitLab MCP server in action\nExperience the GitLab MCP server firsthand with our\ninteractive walkthrough\n.\nIt guides you through setting up Cursor with the MCP server and using Cursor Chat to securely connect to your GitLab instance. You'll see how to perform actions like viewing issues, creating a new issue, and checking merge requests, all directly through natural language, without leaving your development environment.\nHow to configure MCP server in your AI tool\nPrerequisites:\nEnsure\nNode.js\nand\nnpm\nare installed\nVerify that\nnpx\nis globally accessible by running\nnpx --version\nin your terminal\nEnable feature flags\nActivate\nmcp_server\nand\noauth_dynamic_client_registration\nin your GitLab instance.\nAdd GitLab MCP server configuration to your AI tool\nAdd the MCP server entry to your tool's configuration file (\nmcp.json\nfor Cursor,\nclaude_desktop_config.json\nfor Claude Desktop):\n{\n\"mcpServers\": {\n\"GitLab\": {\n\"command\": \"npx\",\n\"args\": [\n\"mcp-remote\",\n\"https://<your-gitlab-instance>/api/v4/mcp\",\n\"--static-oauth-client-metadata\",\n\"{\\\"scope\\\": \\\"mcp\\\"}\"\n]\n}\n}\n}\nRegister and authenticate\nOn first connection, the AI tool will:\nAutomatically register as an OAuth application\nRequest authorization for the mcp scope\nAuthorize in browser\nWhen connecting, the MCP client will automatically open your default browser to complete the OAuth flow. Review and approve the request in GitLab to grant access and receive an access token for secure API access.\nUsing the MCP server\nOnce your AI tool is connected to the MCP server, you can securely fetch and act on GitLab data (issues, merge requests, and pipelines) directly from your development environment using natural language. For example:\nGet details for issue 42 in project 123\nCreate a new issue titled \"Fix login bug\" with description about password special characters\nShow me all commits in merge request 15 from the gitlab-org/gitlab project\nWhat files were changed in merge request 25?\nShow me all jobs in pipeline 12345\nThis feature is experimental, controlled by a feature flag, and not yet ready for production use.\nFor full step-by-step instructions, configuration examples, and troubleshooting tips, see the\nGitLab MCP server documentation\n.\nSummary\nGitLab Duo Agent Platform introduces supports for MCP, enabling AI-powered development workflows like never before. With MCP support, GitLab acts as both a client and a server:\nMCP Client:\nGitLab Duo Agent Platform can securely access data and tools from external systems, bringing rich context directly into the IDE.\nMCP server:\nExternal AI tools like Cursor or Claude Desktop can connect to your GitLab instance, access project data, and perform actions, all while maintaining strict security and privacy.\nThis bidirectional support reduces context switching, accelerates developer workflows, and ensures AI can provide meaningful assistance across your entire toolkit.\nTry it today\nTry the beta of GitLab Duo Agent Platform\nand explore MCP capabilities.\nRead more\nGitLab 18.4: AI-native development with automation and insight\nAgentic AI guides and resources\nWhat is Model Context Protocol?",
  "metadata": {
    "title": "GitLab Duo Agent Platform adds support for Model Context Protocol",
    "url": "https://about.gitlab.com/blog/duo-agent-platform-with-mcp/",
    "published": "2025-09-26T00:00:00.000Z",
    "updated": "2025-09-26T00:00:00.000Z",
    "author": "Itzik Gan Baruch",
    "categories": [],
    "summary": "<p>Artificial intelligence (AI) can accelerate development by generating code,\ndebugging, and automating routine tasks. But on its own, it’s limited to\ntrained data or public sources, while developers often need access to\ninternal systems like project trackers, dashboards, databases, design files\nin Figma, or documents in Google Drive.</p>\n<p>Now integrated into <a href=\"https://about.gitlab.com/blog/gitlab-18-3-expanding-ai-orchestration-in-software-engineering/\">GitLab Duo Agent Platform</a>, ",
    "fetched_at": "2025-10-24T18:28:01.721915",
    "source": "gitlab_blog"
  },
  "processing": {
    "content_length": 11333,
    "word_count": 1672,
    "is_relevant": true
  }
}