{
  "content": "Static application security testing (SAST) is critical to building secure software, helping teams identify vulnerabilities in code before they can be exploited. Last year, with GitLab 17.4, we\nlaunched Advanced SAST\nto deliver higher-quality scan results directly in developer workflows. Since then, Advanced SAST has powered millions of scans across over a hundred thousand codebases, reducing risk and helping customers build more secure applications from the start.\nWeâre building on that foundation with a set of performance enhancements designed to improve accuracy and speed, so developers get results they can trust, without losing their flow.\nNew capabilities\ninclude better out-of-the-box precision, the ability to add custom detection rules, and a trio of improvements to accelerate scan times through multi-core scanning, algorithmic optimizations, and diff-based scanning. Together, these improvements make\nAdvanced SAST\nsmarter and faster, delivering security thatâs developer-friendly by design.\nSAST adoption hinges on both accuracy and speed\nMost SAST programs rarely fail due to inaccurate vulnerability detection; they fail because developers donât adopt security tooling. Too often, AppSec solutions like SAST deliver accuracy at the expense of the developer experience, or developer experience at the expense of accuracy. In reality, both are necessary. Without accuracy, developers donât trust the results; without speed and usability, adoption lags.\nWhen both come together, security fits naturally into the development process â and thatâs the only way security teams successfully drive SAST adoption at scale. This philosophy guides the GitLab roadmap for Advanced SAST.\nAdd custom detection rules for greater accuracy\nThe built-in Advanced SAST rules are informed by our in-house security research team, designed to maximize accuracy out of the box. Until now, you could\ndisable rules\nor adjust their name, description, or severity, but you couldnât add new detection logic. With GitLab 18.5, teams can now define their own custom, pattern-based rules to catch organization-specific issues â like flagging banned function calls â while still using GitLabâs curated ruleset as the baseline. Any violations of custom rules are reported in the same place as built-in GitLab rules, so developers can glean information from a single dashboard.\nCustom rules are effective at catching straightforward issues that matter to your organization, but they donât influence the taint analysis that Advanced SAST uses to catch injections and similar flaws. Customizations are managed through simple TOML files, just like other SAST ruleset configurations. The result is higher-quality scan results tuned to your context, giving security teams more control and developers clearer, more actionable findings.\nFaster scans to get developers in the flow\nSpeed matters. If a SAST scan takes too long, developers often switch to another task, so adoption suffers.\nThatâs why weâve invested in several performance-based enhancements to dramatically reduce scan times without compromising on accuracy, including:\nMulti-core scanning\n: Leverages multiple CPU cores on GitLab Runners\nDiff-based scanning\n: Scans only the changed code in a merge request\nOngoing optimizations\n: Smarter algorithms and engine enhancements\nThese improvements build on each other, delivering faster scans with significant impact:\nMulti-core scanning typically reduces scan runtime by up to\n50%.\nDiff-based scanning helps the most in large repositories, where less code is modified in each change. Itâs specifically designed to give faster feedback in the code review process by delivering faster scans in merge requests. In our testing, many large repositories now take less than\n10 minutes to return results in MRs, where previously scans took more than 20 minutes.\nIn recent internal testing, algorithmic optimizations\ncut scan times by up to 71%\non large open-source codebases, with Apache Lucene (Java) showing the biggest improvement. Other projects, including Django (Python), Kafka, and Zulip, also saw\nperformance boosts of over 50% in single-core mode\n. You can see the results for yourself below.\nFor developers, these improvements mean quicker feedback in merge requests, less waiting on security results, and a smoother path to adoption. And with multi-core scanning and diff-based analysis layered on top, the gains will be even greater.\nThese performance gains reflect GitLabâs broader focus on improving the developer experience across our platform. For example, one of our customers recently transitioned to GitLabâs\nPipeline Execution Policies\n(PEP) to gain greater control and flexibility over how security scans run within their pipelines. By standardizing templates, adding caching, and optimizing pipeline logic, their teams cut dependency scan runtimes from\n15â60 minutes down to just 1â2 minutes per job â saving roughly 100,000 compute minutes every day across 15,000 scans\n. Itâs a clear example of how more customizable and efficient pipeline execution policies lead to faster feedback loops, higher productivity, and broader adoption.\nWith these latest enhancements, Advanced SAST gives security and development teams the accuracy, speed, and flexibility they need to keep up with modern software development. By reducing false positives, enabling custom detection, and accelerating scan times, weâre making security an enabler â not a blocker â for developers.\nLike all of\nGitLabâs application security capabilities\n, Advanced SAST is built directly into our DevSecOps platform, making security a natural part of how developers build, test, deploy, and secure software.\nThe result: faster adoption, fewer bottlenecks, and more secure applications delivered from the start.\nGet started with Advanced SAST today! Sign up for a\nfree trial of GitLab Ultimate\n.\nLearn more\nGitLab Advanced SAST is now generally available\nA comprehensive guide to GitLab DAST\nGitLab Security Testing solutions",
  "metadata": {
    "title": "Delivering faster and smarter scans with Advanced SAST",
    "url": "https://about.gitlab.com/blog/delivering-faster-and-smarter-scans-with-advanced-sast/",
    "published": "2025-10-21T00:00:00.000Z",
    "updated": "2025-10-21T00:00:00.000Z",
    "author": "Salman Ladha",
    "categories": [],
    "summary": "<p>Static application security testing (SAST) is critical to building secure software, helping teams identify vulnerabilities in code before they can be exploited. Last year, with GitLab 17.4, we <a href=\"https://about.gitlab.com/blog/gitlab-advanced-sast-is-now-generally-available/\">launched Advanced SAST</a> to deliver higher-quality scan results directly in developer workflows. Since then, Advanced SAST has powered millions of scans across over a hundred thousand codebases, reducing risk and ",
    "fetched_at": "2025-10-24T18:27:52.051686",
    "source": "gitlab_blog"
  },
  "processing": {
    "content_length": 6040,
    "word_count": 885,
    "is_relevant": true
  }
}