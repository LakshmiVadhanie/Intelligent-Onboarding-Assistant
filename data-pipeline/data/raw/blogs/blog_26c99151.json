{
  "content": "As a developer, you know modern development isn't just about writing code â it's about managing change across the entire software development lifecycle.\nIn\nGitLab 18.3\n, we laid the groundwork for true human-AI collaboration. We introduced leading AI tools such as Claude Code, Codex CLI, Amazon Q CLI, and Gemini CLI as native integrations to GitLab, delivered our first preview of the GitLab Model Context Protocol (\nMCP\n) server in partnership with Cursor, and shipped two new flows, Issue to MR and Convert CI File for Jenkins Flows, to help teams tackle every day problems.\nWith\nGitLab 18.4\nwe are expanding your ability to build and share custom agents, collaborate more effectively through Agentic Chat, navigate codebases with the Knowledge Graph, and keep pipelines green with the Fix Failed Pipelines Flow, while also delivering greater security and governance over your AI usage.\nHave questions on the latest features in the GitLab 18.4 release?\nJoin us for The Developer Show\nlive on LinkedIn on Sept. 23 at 10:00 am PT, or on-demand shortly after!\nBuild your experience\nStart your day by pulling from the AI Catalog â a library of specialized agents that surface priorities, automate routine work, and keep you focused on building.\nAI Catalog as your library of specialized agents (Experimental)\nWith GitLab 18.4, we're introducing the GitLab Duo AI Catalog â a central library where teams can create, share, and collaborate with custom-built agents across their organization. Every team has âtheir way' of doing things. So creating a custom agent is just like training a fellow engineer on the âright way' to do things in your organization.\nFor example, a custom Product Planning agent can file bugs in the specific format, following your labeling standards, or a Technical Writer agent can draft concise documentation following your conventions, or a Security agent can make sure your security and compliance standards are met for every MR. Instead of functioning as disconnected tools, these agents become part of the natural stream of work inside GitLab â helping accelerate tasks without disrupting established processes.\nNote:\nThis capability is currently only available on GitLab.com as an Experiment. We plan to deliver this to our self-managed customers next month in the 18.5 release.\nStay in your flow\nGitLab Duo Agentic Chat makes collaboration with agents seamless.\nSmarter Agentic Chat to streamline collaboration with agents (Beta)\nAs the centerpiece of GitLab Duo Agent Platform (Beta),\nAgentic Chat\ngives you a seamless way to collaborate with AI agents. The latest update to Agentic Chat with GitLab 18.4 improves the chat experience and expands how sessions are managed and surfaced.\nChat with custom agent\nLet's start with your newly-created custom agent. Once designed, you can immediately put that agent to work through Agentic Chat. For example, you could ask your new agent âgive me a list of assignmentsâ to get started with your priorities for the day. Additionally, you now have the ability to start fresh conversations with new agents and resume previous conversations with agents without losing context.\nUser model selection\nWith previous releases, you're able to select models at a namespace level, but in 18.4 you can now choose models at the user level for a given chat session. This empowers you to make the call on which LLM is right for the job, or experiment with different LLMs to see which delivers the best answer for your task.\nImproved formatting and visual design\nWe hope you love the new visual design for GitLab Duo Agentic Chat, including improved handling of tool call approvals to ensure your experience is more enjoyable.\nAgent Sessions available through Agentic Chat\nSessions are expanding to become a core part of the Agentic Chat experience. Any agent run or flow now appears in the Sessions overview available from Agentic Chat. Within each session, you'll see rich details like job logs, user information, and tool metadata â providing critical transparency into how agents are working on your behalf.\nNote:\nSessions in Agentic Chat is available on GitLab.com only, this enhancement is planned for self-managed customers next month in the 18.5 update.\nUnlock your codebase\nWith agents, context is king. With Knowledge Graph, you can give your agents more context so they can reason faster and give you better results.\nIntroducing the GitLab Knowledge Graph (Beta)\nThe\nGitLab Knowledge Graph\nin 18.4 transforms how developers and agents understand and navigate complex codebases. The Knowledge Graph provides a connected map of your entire project, linking files, routes, and references across the software development lifecycle. By leveraging tools such as go-to-definition, codebase search, and reference tracking through in-chat queries, developers gain the ability to ask precise questions like âshow me all route filesâ or âwhat else does this change impact?â\nThis deeper context helps teams move faster and with more confidence â whether it's onboarding new contributors, conducting deep research across a project, or exploring how a modification impacts dependent code. The more of your ecosystem that lives in GitLab, the more powerful the Knowledge Graph becomes, giving both humans and AI agents the foundation to build with accuracy, speed, and full project awareness. In future releases, we'll be stitching all of your GitLab data into the Knowledge Graph, including plans, MRs, security vulnerabilities, and more.\nThis release of the Knowledge Graph focuses on local code indexing, where the\ngkg\nCLI turns your codebase into a live, embeddable graph database for RAG. You can install it with a simple one-line script, parse local repositories, and connect via MCP to query your workspace.\nOur vision for the Knowledge Graph project is twofold: building a vibrant community edition that developers can run locally today, which will serve as the foundation for a future, fully-integrated Knowledge Graph Service within GitLab.com and self-managed instances.\nAutomate your pipeline maintenance\nFix pipeline failures faster and stay in the flow with the Fixed Failed Pipelines Flow.\nFix Failed Pipelines Flow with business awareness\nKeeping pipelines green is critical for your development velocity, but traditional approaches focus only on technical troubleshooting without considering the business impact. The\nFix Failed Pipelines Flow\naddresses this challenge by combining technical analysis with strategic context. For example, it can automatically prioritize fixing a failed deployment pipeline for a customer-facing service ahead of a nightly test job, or flag build issues in a high-priority release branch differently than experimental feature branches.\nBusiness-aware failure detection\nmonitors pipeline executions while understanding the importance of different workflows and deployment targets.\nContextual root cause analysis\nanalyzes failure logs alongside business requirements, recent changes, and cross-project dependencies to identify underlying causes.\nStrategic fix prioritization\ngenerates appropriate fixes while considering business impact, deadlines, and resource allocation priorities.\nWorkflow-integrated resolution\nautomatically creates merge requests with fixes that maintain proper review processes while providing business context for prioritization decisions.\nThis flow keeps pipelines green while maintaining strategic alignment, enabling automated fixes to support business objectives rather than just resolving technical issues in isolation.\nCustomize your AI environment\nAutomation only works if you trust the models behind it. That's why 18.4 delivers governance features like model selection and GitLab-managed keys.\nGitLab Duo model selection to optimize feature performance\nModel selection\nis now generally available, giving you direct control over which large language models (\nLLMs\n) power GitLab Duo. You and your team can select the models of your choice, apply them across the organization or tailor them per feature. You can set defaults to ensure consistency across namespaces and tools, with governance, compliance, and security requirements in mind.\nFor customers using GitLab Duo Self-Hosted, newly added support for GPT OSS and GPT-5 provides additional flexibility for AI-powered development workflows.\nNote:\nGitLab Duo Self-Hosted is not available to GitLab.com customers, and GPT models are not supported on GitLab.com.\nProtect your sensitive context\nAlongside governance comes data protection, giving you fine-grained control over what AI can and can't see.\nGitLab Duo Context Exclusion for granular data protection\nIt's no surprise â you need granular control over what information AI agents can access.\nGitLab Duo Context Exclusion\nin 18.4 provides project-level settings that let teams exclude specific files or file paths from AI access. Capabilities include:\nFile-specific exclusions\nto help protect sensitive files such as password configurations, secrets, and proprietary algorithms.\nPath-based rules\nto create exclusion patterns based on directory structures or file naming conventions.\nFlexible configuration\nto apply exclusions at the project level while maintaining development workflow efficiency.\nAudit visibility\nto track what content is excluded to support compliance with data governance policies.\nGitLab Duo Context Exclusion helps you protect sensitive data while you accelerate development with agentic AI.\nExtend your AI capabilities with new MCP tools\nExpanded MCP tools extend those capabilities even further, connecting your GitLab environment with a broader ecosystem of intelligent agents.\nNew tools for GitLab MCP server\nExpanding on the initial MCP server introduced in\n18.3\n, GitLab 18.4 adds more MCP tools â capabilities that define how MCP clients interact with GitLab. These new tools extend integration possibilities, enabling both first-party and third-party AI agents to take on richer tasks such as accessing project data, performing code operations, or searching across repositories, all while respecting existing security and permissions models. For a full list of MCP tools, including the new additions in 18.4, visit our\nMCP server documentation\n.\nExperience the future of intelligent software development\nWith\nGitLab Duo Agent Platform\n, engineers can begin to move from working on one issue at a time in single threaded fashion, to multi-threaded collaboration with asynchronous agents that act like teammates to get work done, faster. We are bringing to market this unique vision with our customer's preferences for independence and choice: run in your preferred cloud environments using the LLMs and AI tools that work best for you, within the security and compliance guardrails you set.\nAs an integral part of this innovation, GitLab 18.4 is more than a software upgrade â it's about making the day-to-day experience of developers smoother, smarter, and more secure. From reusable agents to business-aware pipeline fixes, every feature is designed to keep teams in flow while balancing speed, security, and control. For a deeper look at how these capabilities come together in practice, check out our walkthrough video.\nGitLab Premium and Ultimate users can start using these capabilities today on\nGitLab.com\nand self-managed environments, with availability for\nGitLab Dedicated\ncustomers coming next month.\nEnable beta and experimental features in GitLab Duo Agent Platform today\nand experience how full-context AI can transform the way your teams build software. New to GitLab?\nStart your free trial\nand see why the future of development is AI-powered, secure, and orchestrated through the world's most comprehensive DevSecOps platform.\nStay up to date with GitLab\nTo make sure you're getting the latest features, security updates, and performance improvements, we recommend keeping your GitLab instance up to date. The following resources can help you plan and complete your upgrade:\nUpgrade Path Tool\nâ enter your current version and see the exact upgrade steps for your instance\nUpgrade documentation\nâ detailed guides for each supported version, including requirements, step-by-step instructions, and best practices\nBy upgrading regularly, you'll ensure your team benefits from the newest GitLab capabilities and remains secure and supported.\nFor organizations that want a hands-off approach, consider\nGitLab's Managed Maintenance service\n. With Managed Maintenance, your team stays focused on innovation while GitLab experts keep your Self-Managed instance reliably upgraded, secure, and ready to lead in DevSecOps. Ask your account manager for more information.\nThis blog post contains \"forward-looking statements\" within the meaning of Section 27A of the Securities Act of 1933, as amended, and Section 21E of the Securities Exchange Act of 1934. Although we believe that the expectations reflected in these statements are reasonable, they are subject to known and unknown risks, uncertainties, assumptions and other factors that may cause actual results or outcomes to differ materially. Further information on these risks and other factors is included under the caption \"Risk Factors\" in our filings with the SEC. We do not undertake any obligation to update or revise these statements after the date of this blog post, except as required by law.",
  "metadata": {
    "title": "GitLab 18.4: AI-native development with automation and insight",
    "url": "https://about.gitlab.com/blog/gitlab-18-4-ai-native-development-with-automation-and-insight/",
    "published": "2025-09-23T00:00:00.000Z",
    "updated": "2025-09-23T00:00:00.000Z",
    "author": "Bill Staples",
    "categories": [],
    "summary": "<p>As a developer, you know modern development isn't just about writing code — it's about managing change across the entire software development lifecycle.</p>\n<p>In <a href=\"https://about.gitlab.com/blog/gitlab-18-3-expanding-ai-orchestration-in-software-engineering/\">GitLab 18.3</a>, we laid the groundwork for true human-AI collaboration. We introduced leading AI tools such as Claude Code, Codex CLI, Amazon Q CLI, and Gemini CLI as native integrations to GitLab, delivered our first preview of ",
    "fetched_at": "2025-10-24T18:28:03.353372",
    "source": "gitlab_blog"
  },
  "processing": {
    "content_length": 13366,
    "word_count": 2014,
    "is_relevant": true
  }
}