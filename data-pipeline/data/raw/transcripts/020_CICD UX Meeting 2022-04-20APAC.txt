Video: CI/CD UX Meeting 2022-04-20(APAC)
Video ID: rOuDMTvbw-0
URL: https://www.youtube.com/watch?v=rOuDMTvbw-0
================================================================================

 Hello everyone, today is the 20th of April and we are meeting for the CIICD UX meeting and starting off with the general announcement. So we are approaching the end of quarter first for financial year 21, 22, 23. So I think it's a good time to go back and review our OCR progress and drop a note if we are apprehensive of kind of reaching any of the cares mentioned and that's it that there's just one general announcement this week. Alright, so I think yeah, Katie, to you. Yeah, I don't have actually that much to report on this week because it's been lots of holidays and whatnot, but this week I'll be doing some survey development interviews in preparation for releasing a survey. So Erica gave me this idea. So what I'm going to do is have some customers take the survey kind of in front of me and then I can kind of prompt them with questions and make sure that the survey is actually asking the right questions and covering everything we want to know and make sense. So that'll be tomorrow and the next day. And I just put a small request for design feedback that just occurred today in this lack message. We have this case where we have to put an alert inside of a table. And I just I did read the pajamas guidelines and it says it's acceptable to put alerts in context, but I haven't actually seen them in a table and I just wanted to check with the UX team. If that's acceptable or if it's weird. And my last point was just asking the group if anyone's leveraged data to make design decisions and what the process was like I've been chatting with the growth team a little bit about their process and I really like to start having like measures of success for design issues and package. And yeah, I'm just looking for some starting points. So we haven't really been using data a lot on the pipeline all three team to measure. That's the design issues. However, in the past couple of milestones, I started really strictly using our complete issue template for the design issues and all of them have a section for metrics. So I noticed that that's been a good kind of like a prompt for. Pm and I about it and to try to set some metrics that we will be tracking for this future. And now we're starting just to instrument new metrics, wherever we need them and so on. So we're very early in the process, but. And so we've been talking about it. I just don't have any historical data to share with you how it worked out right. And is that typically just the engineers who are implementing the data and did they go to some kind of like season dashboards is that kind of how it works. So the first step would be for us to check if this is something that we can get right away from looking at our dashboards. Sometimes we can get that data. Otherwise, we talked to our engineers and we might have to open an issue to look into how we can get the data with our engineers. So we might also have to reach out to our data team, whatever their name is, but we have like a team responsible for that. Oh, thanks. So I know from like I was also trying to set up something for pop in execution. And that's when I went back to a UX showcase video by Michael. And I talked about how he made certain decisions about the navigation by looking at the data. And I created an issue for pipe and execution. I'm not able to find it right away, but we haven't worked on that yet. We haven't set up the tracking or instrumentation yet because even for that, we would need some engineering bandwidth, which at this point we don't have. But that video is a really good source. I think you should watch it. Thank you. Cool. Yeah, should we move on to Nadia? Yeah. All right. So this week I'm starting to refine that NBC proposal for the private CI city component catalog. We're going to pursue the private CI city component catalog first rather than the public one. This is just a business decision. So it seems easier for us in terms of instrumentation. And this is the catalog that we would be able to dock food more easily because we could have a private CI city catalog for the Git lab team. So our idea is to create a private CI city catalog process. So it's a process for publishing a CI city component and using the CI city component that's more team could use and we're looking at. I think our infrastructure team, maybe the productivity team and maybe I forgot what's the team name is, but the team that manages fast and fast and so on. I think it's the cure maybe. I'm planning that, I guess. Yeah, I checked vulnerabilities in your code. So month, the cure. Right now I'm defining the user flows and I can actually open up my feedback very quickly shares. I think we'll have some time for that. Okay. So we're trying to reuse the existing UI as much as possible for this flow. So the idea here is that to publish a component in the city catalog, you will be using the projects UI, documentation instructions and our existing UI for creating a branch text and make a release. So you would start with reading through the instructions for like step by step instructions for creating your component in the docs. Then you would have to create a new project and we're planning to utilize the template function for that. So you can create a project from a template and there would be a template to create a CI city component. And you would use that project to create your component, YAML and ready be files component, YAML. It's where the actual component like pipeline code will be and read me file, welcoming all of the usage instructions for that component. Once that component is published, we will pull this information into the CI city catalog page where you will be able to see the usage guidelines for the component and actually use the component like on the developer side. So once you, yes, this is basically just the usual kind of merge request flow, you review the files with your team, ensure that everything works good. Once all of your files are in order and you think that the component is ready to be used by your organization. You would create a version tag by going to repository and tags. So we already have a UI for that. And you would publish the component by making a release, which would trigger that component to become available in your private CI city component catalog. It would be like a top level page that lives inside GitLab, but it's kind of like it's separate from your projects UI. It's kind of similar in its location to the project that projects dashboard that you have. So it's kind of like, yeah, it's project agnostic. So the component would become available in the component catalog. And you can access the catalog either by going to github.com dash CI city components, or you can just access from the CI city navigation. So if you want to use the component as a developer of a project in an organization. So your platform team would make these components available to you or your DevOps engineers. And then as a developer, if you need to use it for your application project, you just go to the CI city components in your session navigation, or you can access the catalog directly. You select the component to be used. You open the component page where you can see all of the usage guidelines. And we will pull this information from the component project, read me. All of the component component component, full from the project component project has been created. You would be able to select a component version. And from there, the flow is to copy the code snippet for a glutee in the component. And then using whatever editor you prefer, you have to paste that snippet into your pipeline and do some customizations from from there, you would have to customize variables and maybe some other parameters that I'm not aware of yet. To make it work, but all of that information would be inside the component read me. So we would show that on the component page. Yeah, so these are like the two major flows that I have for now. And aside from that, I'm also looking into the discovery, like how do you discover this feature at all. And then also how do you discover the components to use for the developer in location project. We probably it's probably going to be pretty minimal for them to see can consider our goal is to dog food. So I can imagine a lot of this will be slashed from them, this he but they're like kind of exploring those flows. And then I have a more can flows for releasing a new version of the components. So updating a component and how how to work with developers, opting into the updates or like updating the version. And then it's a whole new story. How do you publish the component and make sure it doesn't break anyone's pipeline. Yeah, so if you have any feedback at this point, let me know. We're trying to reuse things as much as possible and keep it super simple, but I'm also trying to see how we can make it. Yeah, how we can make the flow more natural because you have to jump around the your I a lot. It's kind of very disjointed. One small clarification that I just wanted to I needed from you was complete GitLab CIE. We can say that it is constituted by many components. So I see I see a component is any part of the pipeline that can be included inside of your pipeline. So the difference here is that instead of copy and pasting the whole template into your GitLab CIE, you would just say include a sastest in this pipeline and it just gets imported. Kind of the same as importing a component into your file. And for the creation part is very clear, but I'm just trying to think of like what would you say is the jobs to be done, which is associated with the second part of the user flow that you had to, which is using the component. Yeah, so we don't have a validated job to be done for that. So yeah, I also have my slower confidence for the part of actually using the component. But the job to be done would be something like when I'm creating a pipeline for my application project, I want to easily find or like I want to easily create a reliable and compliant pipeline for my project like with the resources provided to me. The main theme here that we notice that developers don't want to learn YAML, they don't want to have to figure out what they need to use for their project. Ideally, they would have those components provided to them and there's some guidelines. Generally, the organization provides some guidelines. Hey, if you're working on a project, you, your pipeline needs to have this kind of test. It needs to include this include that for compliance. It also needs to run those kinds of script and as a developer, you just say include this include this include this and the pipeline just run. Yeah, and I think it would still mostly be used by DevOps engineers, right, because at least in enterprises developers won't have the access to editor YAML file. So what do we see it really varies from organization to organization and how their teams are set up. Sometimes developers are also maintaining pipelines. So they may not have permissions to just like push to main, but usually anyone can contribute to the YAML file. So it's usually kind of collaborative effort. The platform team will infraw DevOps team provides some resources and guidelines. And ideally, they would just automatically create pipelines for everyone, but also the project developers typically have the knowledge about the project that also the platform team may not have and have some specific special needs. So, yeah, so they do create pipelines, but there's lots of nuance there. It's also something that we need to gather more insights about like what are those differences and how they collaborate. Thanks, thanks for answering that. I think Katie has a comment. Yeah, just had one comment, which we talked about briefly in our sink, which is the user flow feels so similar to the package and container registries and which is like I want to publish a thing, maybe more as like a DevOps kind of person. And I just want developers to consume it and there's kind of certain permissions and one of the problems that we're trying to solve and package or something that we need to research on is like currently all of our things are tied to a repository and that may not make sense for the way that users want to use our product and this feels kind of similar. It feels kind of like you just want to have a repository of components that everyone can access without too much dramas that aren't necessarily tied to a repository. So, yeah, I'm just like more of a comment and not a question, but yes, I see a lot of overlap and like, yeah, we could probably learn from each other's research. We also have some concerns that we might encounter some limitations there because of using the project work flow for this and using, yeah, using a repro for each component, but at least for them, we see it gives us so many things for free that already exists that yeah, it makes sense to use it, but yeah, let's keep a shadow posted on any any related findings. Okay, so the rest is kind of read only, but I'll quickly verbalize in between the zero, be working with Jeremy and the tech writing team to define the guidelines for using drawers for health content and we'll be considering such things as the drawer ability, the content guidelines, how we're going to pull in information from our documentation into the drawer, how it's going to work with markdown styling and whatnot. And what are some additional component features that are necessary to make it work, for example, we're considering making the drawer recyclable for users, so they're able to consume more long form information more clean the drawer and then there's some other similar considerations that we're going to be discussing. And another thing is that the official Git Club brand refresh and also this coming soon and there's a lot of prep work that's happening for that and once the brand refresh guidelines are announced, we're going to update the Git Club illustrations throughout the product to match the new brand guidelines. So currently we're starting to work on an audit for all illustrations in the product to see what illustrations are used, how are they used, we have lots of illustrations that aren't used in the products like dozens of them that exists in the library, but not in the product. So we want to fix that like we don't want to have that bloat so obviously maybe those illustrations we wouldn't update maybe we would defricate them. So yeah, we're going to be considering things like that. Nice. All right, moving on to mine. So this week I I checked I take the progress that I've made with the OCR that it seems that I don't have much control over the S1 implementations because our team has limited availability of developers and all the designs for S1 and S2 are already provided. So I'm taking this week this particular milestone kind of to work on the foundation stuff for the stage group and that's where I decided to revise the job, stupid and mapping for pattern execution. That's what I'm focusing on this week at least. I am going to apply all the learnings that I've had from all of our experiences and I'll try to do it differently this time. And also I'm also looking at more effective methodologies. So if anyone knows something that I should be looking at, please share it with me. And once I'm at a good place with the mapping like once I have all the primary stuff there on the board in front of me, I'll be sharing it with the larger team with all of you to understand how we should be handling the overlapping pieces. And there's a very interesting challenge that I have kind of identified that will be facing in this effort and that's with the CIS scaling category because that is technically a non marketable category. It's the work that falls under CIS scaling is mostly what we are doing in preparation to handle a huge amount of like to handle anything that relates to scaling with continuous integration. For example, how would many people, thousands of employees in let's say an enterprise would be working with the pipelines would are infrastructure be able to handle, although tasks that they would be performing. So there's not one job should be done that we can probably zero down on for this because it applies to everything that users would be doing in pattern execution. So we do have a maturity plan for that and it will be interesting to kind of figure out how we are going to assess it. So I'm starting I'm creating an async issue where I'll be involving the back in engineers, the product manager to understand like what is it like what are we considering as goals for ourselves when we are talking about maturity. And once that is clear, then we'll be discussing about how we want to assess the maturity, how we want to measure it. And that's pretty much all from my side because I've been busy with the design and be a witch by the way is coming to an end this week. So I'm excited about sharing the learnings from there as well. I wanted to ask about the CI scaling category because it's I think it's something that's also relevant for the pipeline authoring team, but we don't really think about it that much like it's actually the first time that I learned about the CI scaling categories during our one on one this week. So when you mentioned it, so what are some of the things that you're looking into as part of the category like are there any themes specifically that are emerging and do you see any overlap with pipeline authoring. There's the obvious overlap with authoring but then when we talk about continuous integration, we kind of talk about both pipeline authoring and pipeline execution. So most challenges that we face with scaling is when the pipelines are running, I guess, when the runners are working so I'm going to share the category page with you here. This is the category direction we have for continuous integration scaling so if you see the vision items it's mostly around CI CD data module and improving granular job queuing. It's mostly around runner and what we are doing where the pipelines are running. Yeah, it makes sense. I guess for us, CI scaling, like making it more usable for very large teams for pipeline authoring it looks like making the process of enabling developers and organizations to create pipelines easier, more effective. So the CI catalog is part of that. But yeah, we haven't really, we haven't really considered like what are the different, how are the workflows different for organizations that are really like on the extreme side. One thing that I have proposed as a part of my. So the development plan is I want to kind of start an effort which would be around creating frameworks for designing for scalability and this is going to be like all of us would be involved because each one of us here is facing challenges when it comes to like incorporating scalability in our respective stage group features. Yeah, that's that's something that's in discussion and I'll share more as I hear more. Sounds very interesting. And that's all what else do we have so there are two UX research threads one by will and one by Erica, but the prioritization issues. And please go and have a look there if you want to check like what's the priority for this quarter, I mean for the upcoming quarter mostly. And that's it and we are on time with three minutes to spare that's great. All right, then oh, sorry, I just noticed we also have. Oh, it's from none of mine. So we thought we had manager announcements underneath, but it was already the agenda for the previous meeting that we had. Today was sure. All right. I have a good day everyone.