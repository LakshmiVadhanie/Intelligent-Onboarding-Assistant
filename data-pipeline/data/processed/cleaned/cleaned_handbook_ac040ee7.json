{
  "content": "Geo and Disaster Recovery - Planning\nHow the Geo Team Operates\nDiscussions\nDiscussions are documented in this\nGitLab project\n.\nPlanning\nHierarchy of Work Items\nOne aspect of planning that provides clarity for development execution is the breakdown of roadmap into a hierarchy of informational pieces that are organized in GitLabs own\nwork items\nas part of product management.\nThis section describes the approach that the Geo team takes to break down the requirements into work-in-progress items that engineers move through the workflow of implementation.\nFirst, we describe general agile work item terminology to create alignment and use common industry vocabulary. We then map these general terms to the specific work item terminology used by GitLab.\nFinally we provide some guidelines and rules of thumb when creating new ites and about choosing the right level of granularity for them.\nThe details of this are documented in our\nGeos Hierarchy of Agile Work Items\npage.\nKanban\nWe work in a continuous Kanban manner while still aligning with Milestones.\nEpics and issues have the following lifecycle:\ngraph LR;\nPlan -- Schedule;\nSchedule -- Build;\nBuild -- Release;\nRelease -- Post-Release;\nThree boards are used to monitor this process\nPlan\nSchedule\nBuild\nPlan\nWe use the\nKanban Plan board\nto triage issues that are not yet planned for a milestone. Issues in this board are labeled group::geo and use the workflow labels workflow::validation backlog, workflow::problem validation, workflow::design, workflow::solution validation, workflow::planning breakdown and workflow::scheduling.\nThe Product Manager(PM) owns this board and uses it to advance issues through to becoming feasible Epics. When work leaves this\nboard, it is in a fit state for the engineering team to implement the issue.\nIn this stage, the PM establishes new work that they would like to see in the Geo feature. The planning process is as follows:\nProblem validation\nThe PM tries to establish that the issue describes a problem with the Geo feature that is customer-relevant (internal and external),\nor has some other clear merit (e.g. a technical improvement in the backend). The PM will draw on other group members, customers and the UX organisation where necessary.\nIf the problem is validated, the issue is moved forward to the next stage, otherwise it is closed with a short explanation on\nwhy\nthe problem will not be considered. This explanation should also contain\na link\nto the category strategy\n.\nSolution validation\nOnce the problem is validated, the PM will consider creating a work item as per our guidelines for\nhierarchy of work\n.\nThey will then reach out to the Engineering Manager(EM) for a technical contact in the team. The EM assigns\nownership\nof the work item to an engineer. The engineer will work with the PM\nto determine a technical solution for the problem.\nOccasionally, a proof-of-concept (POC) is necessary to determine a feasible technical path. When one is required, the PM\nwill create a POC issue that contains the context of the research to be conducted along with the goals of the POC. This\nissue will be scheduled for work before any further breakdown of tasks is performed.\nPOC issues are also time-boxed with a due date applied to these items and should be labeled POC. On the due date, the engineer is expected to\nprovide a comment on the issue regarding the outcome of the POC. Time-boxing these issues is meant to constrain the\nscope of the work.\nIt is also important to note that not all POCs will be successful, and that is OK! Some avenues of research may not be\nsuccessful, and the POC will have saved us from investing significant time in a solution that will not meet our needs. The goal is to fail fast!\nThe PM and the engineer will work together to create all of the\nwork items\nrequired to build the solution. These items account for\nDocumentation\nTesting\nPost-release items such as rake tasks, migrations or monitoring issues\nIdeally,\nepics, features and user stories\nshould be broken down by external functionality rather than by implementation details. Even refactors and performance improvements should highlight the customer value and be described with a user-centric approach.\nPost-release tasks that need to be performed by SREs are created in the Infrastructure team project and cannot be\nadded to work items as related issues. For these, its useful to list them in the highest level work item description.\nWhen they are satisfied that they have a reasonable solution including an estimation of effort for each work item, this breakdown should be shared with the rest of the team\nfor discussion and feedback. Planning is transparent anyway, but this serves to notify the team that the new work items are ready\nfor development.\nFor issues that include a feature that uses a Feature Flag (FF), we follow the feature flag\nlifecycle doc\n.\nThe original issue should remain open and blocked on the FF rollout issue until the rollout issue is closed, in case the rollout does not go as planned.\nSchedule\nOn an ongoing basis, the PM and EM will meet to discuss the work that is currently active, and queue prepared items for development.\nIn this process, prepared items will be given the milestone label along with\nworkflow::ready for development\n, which will pull items into the Build board.\nPart of the ongoing prioritization and scheduling effort includes providing answers to these questions\nWhat is active now?\nWhat needs to be active next?\nAre there any deliverables?\nIs the active list in priority order?\nBugs list\nTechnical debt items arising\nThe outcome of these scheduling activities are reflected in an\nOutlook Issue\nthat the PM prepares and which encapsulates the direction and scope of the upcoming iteration.\nBuild\nWe use the\nKanban Build board\nto look at issues that have the\n%Started\nmilestone in combination with the\ngroup::geo\nlabel.\nThe Engineering Manager(EM) owns this board and uses it to facilitate building out the Epics and issues that the team have decided\nare ready for development.\nIssues are added in the ready for development column in priority order. When an engineer is open, they can pick\nunassigned issues from the top of this list. As their work progresses, they advance the issue through the in dev and\nin review columns. Engineers need to keep the issues aligned with the status of the corresponding merge requests.\nWhen an issue is in review, the MR should be assigned to both the original engineer and the reviewer so that it is\nclear that the merge request has an active reviewer. This helps the EM to see how much work is allocated to each person.\nThe column for verification is where the owner of the Epic, or the PM will ensure that the issue fits into the context\nof the solution. This is also where we confirm if a release note is required for this issue, and assign the correct\nmilestone.\nRelease and Post-Release\nFor some issues, there are tasks that need to be performed by SREs after the release is completed. Because these tasks\nare often in the infrastructure project, they cannot be added to Epics. We still need to track these and follow them\nthrough to completion.\nFinally, we ensure that any communication that needs to go out for this issue is delivered. These can take the form of\nrelease posts, blog posts, video tutorials, or demos.\nWork Ownership\nThe Geo team uses a variety of\nwork items\nto describe features or capabilities that will increase the maturity of the Geo categories over time.\nEach high-level work item (i.e. Epics and/or Features) should be owned by an engineer who is responsible for all technical aspects of that work item. If at any point, the\nowner needs to take leave that is more than a few days, they should assign another engineer to act as owner until they return.\nIn the planning phase\n, the engineering owner will work closely with the Product Manager to understand what the requirements\nare and why they are important to customers. The engineer will decide on how best to deliver the solution and create\nTasks\nthat encapsulate the technical work required. They may need to consult with other team members and stable counterparts\nto come up with the right approach to delivering the requirements.\nThey should include Tasks for documentation changes and additional testing requirements that are required. A task should be created to inform Geo experts in the Support group about the change if needed. The engineer\nshould also consider if there is any technical debt that is appropriate to address at the same time. Additional Tasks are also\nneeded for any rollout or post-release todos.\nThe engineer that is the owner does not need to be the only person implementing the Tasks.\nThey should keep watch of the work that is done on the tasks so that they can verify that the work is progressing correctly.\nIdeally, they should also be an approver on each MR for the work items. If there are problems with the work, or lengthy delays,\nthey need to make sure the Product Manager and Engineering Manager are aware.\nWhen work is nearing completion\n, the owner engineer should check the release note and work with the PM on any changes.\nThey should also make sure that any additional issues that may have come up during the build process are either\naddressed, or scheduled for work. This will help to make sure that we do not build up technical debt while building.\nFinally\n, owners should also monitor any work that needs to occur while rolling out the Epic or Feature in production. If there are\nrake tasks, database migrations, or other tasks that need to be run, they need to see those through to being\nrun on the production systems with the help of the Site Reliability counterpart. They may also need to assist the\nProduct Manager with creating the release note for the work item.\nThis places a lot of responsibility with the owner, but the PM and EM are always there to support them. This ownership\nremoves bottlenecks and situations where only the PM or EM is able to advance a work item. In addition, the best people\nto decide on how to implement a task are often the people who will actually perform the work.\nThe responsibility of the Product Manager is to make sure that there is enough information for the engineer to develop the\ncorrect solution that meets the requirements. They are also available to answer clarifying questions or consider how to\napproach edge cases. At the end of a work item they also communicate this out to customers and other interested parties.\nThe Engineering Manager is responsible for clearing the path. They need to make sure the engineers performing the work\nhave the access to the right information, people, tools, and other resources to get the work done. They try to foresee\nproblems and clear any blockers that may arise while the work is in progress.\nOpening an Issue\nWithin the Geo Team we utilize Issue Templates to create consistency in our Backlog to help us be more Efficient and deliver more Results.\nUsing Issue Templates has been found to help the team in the following ways:\nEnsures an Issue has all the required information so that any contributor can pick up and start or join a conversation without any outside context.\nEmpowers our Refinement Process to work more efficiently which results in higher Community Contributions and less SME reliance.\nHelps Issues stay relevant and not unintentionally sink to the bottom of our Backlog.\nWe use the following Issue Templates:\nBug (template)\nUsed as the template for Bugs and their investigation.\nFeature - lean (template)\nUsed as the template for larger Feature requests. These will often drive a conversation and ultimately be promoted to Epics with Implementation Issues being broken off into MVC changes.\nImplementation (template)\nUsed as the template to break down large Epics, organize MVC level changes, and assist in our Refinement Process.\nNote: Many sections in a template should be treated as optional if there is no relevant information to be added.\nAddressing new issues quickly\nWhen new issues arise (through testing, customer support issues, or other means) we still want to be able to address them\nquickly without being delayed by process.\nIf you think a new issue needs to be worked on immediately:\nMake sure there is enough detail on the work item description for someone else to understand the issue and for someone else to have\nenough context to review your work\nMake sure there is a weight\nAssign it into the current milestone\nAdd the\nworkflow::STATUS\n,\ngroup::geo\nand the\nunplanned\nlabel\nAssign it to yourself\nWeights\nWe use the weights from the set [1, 2, 3, 4, 5, 10] where the value represents a best work day. A best work day means\na day where there are no interruptions, emails or other demands on your time.\nFor example, if an issue is assigned a weight of 5 then an engineer should be able to complete the work in 5 days if\nthis were the only thing that they needed to do for those five days.\nIf an issue is assigned a weight of 10, then the issue is too big and will need to be broken down further. This usually means promoting the issue to an epic and raising individual issues that have a lower weight.\nIf any issue is weighted above a 3, we should ask ourselves if it can be further broken down. We should do this even if the issue was already broken out from an even larger issue.\nBacklog Refinement Process\nBacklog refinement equals moving issues from\nworkflow::validation backlog\nthrough each stage toward\nworkflow::ready for development\n. Engineers will follow instructions provided in a weekly assigned refinement issue, which generally aligns with\nProduct Development Flow\n.\nIssues in the\nGitLab.org group\nlabeled\n\"group::geo\n,\nworkflow::validation backlog\nwill be refined.\nEach week 3 issues will be randomly selected by a bot and refined by the team. Bugs will be prioritized over feature requests and a go/no go will be given.\nRefinement issue is created and assigned to engineers. It contains instructions for what to do with each issue and is the source of truth for this part of the process. The rest of the steps below are an overview.\nPhase 1: Engineers will select 1-3 issues each and put the label\n\"workflow::problem validation\non when they start taking a look.\nIf the issue doesnt have the right issue template/enough details, it will be sent back to the author/PM for clarification\nIf the issue is a go, move to\n\"workflow::refinement\nfor Phase 2. See below how to decide if an issue is a go or no-go.\nPhase 2: Engineers will add an implementation guide, the right labels and weights for the issue. Once that is ready, move it to\n\"workflow::ready for development\nfor the PM/EM to schedule.\nFor bug issues, the bug first needs to be reproduced as a part of the refinement process. If the bug issue isnt reproducible, the issue can be closed off. Bug issues also need to be assigned a priority/severity in addition to the regular labels.\nFor features/maintenance issues, a timebox of 1 hour or so is expected per issue and for bugs this could take 2-3 hours as we need to reproduce it before adding implementation details\nPlease also label as\n\"Seeking Community contributions\"\nif an implementation guide has been added and weights are 1-3.\nIf this issue has a weight of 1-3 and could be easy enough for a community contributor, it should also be relatively easy to write up the implementation guide. Timebox to 30 mins - 1 hour.\nIf the issue is very complex, stop investigating as soon as youve realized that its going to take  1 hour to reproduce/write the implementation guide.\nIf an issue takes too long or you think is not aligned with our current roadmap, be vocal about pushing back on it and discuss it on the refinement issue.\nPhase 1: How to decide if an issue is a go or no-go\nIn phase 1, we decide whether or not an issue is a go or no-go for refinement in phase 2. An issue that is a go will always be moved to phase 2 for refinement.\nAn issue is a no-go, if,\nthe feature is not aligned with our current roadmap (i.e. in the next 6 - 12 months)\nthe issues context is outdated or irrelevant now\nit is a duplicate (mark it as a duplicate)\nit is already resolved, completely, or enough to not be worth prioritizing any more\nthe solution is complex and the demand is low\nThose issues that are a no-go should be closed with the reason mentioned or de-prioritized to priority 4, so that phase 2 engineers do not pick them up for refinement. Please tag the EM and PM when closing an issue if youre not 100% confident what to do with it.\nThe refinement script can be found\nhere\nEngineering Customer/Support Rotation Process\nEvery two weeks, a Geo engineer is assigned to be the DRI for doing the technical assessment of customer support tickets + monitoring\n#g_geo\nchannel for support issues.\nProcess summary:\nEvery week, a slack reminder in\n#geo-lounge\nchannel will let the group know that a new support shift is starting for technical assessment triage.\nEvery Geo engineer is expected to be aware of their upcoming rotation (as per the schedule below) and take action as per the slack reminder.\nThe DRI currently assigned to the rotation should then dedicate their two weeks to review issues from the customer support\nbacklog\nand support in the\n#g_geo\nchannel.\nBe first on point to triage questions in our\n#g_geo\nchannel. Now that we have a slack workflow - this should be taught/triggered per more complex questions and quickly answer anything thats short and sweet.\nExpected duties are: triaging, creating issues, documenting initial research, adding priority labels etc. so that a customer support issue can enter our usual workflow.\nIf the DRI is unable to perform an upcoming triage rotation shift due to any reason (e.g. PTO, sick leave, other responsibilities taking precedence), they are expected to swap their rotation with another team member or notify the EM to facilitate. Once the swap is identified, the schedule should be updated with via a MR.\nThe DRI needs to update this\nissue\nfor the 2025 rotation.\nThe DRI should estimate the amount of time spent on support and track this via\nTime Tracking\nin each issue approximating to the hour how much they have spent on tickets and triaging. This is a new part of the process which is in a trial phase.\nAt the end of the rotation, each engineer should provide handover notes inside the\nissue\nor directly on the RFH:\nUsing our standardized Duo/AI Chat prompt for handing over an RFH below\nProofread and correct Duos output if needed.\nPost it directly on the issue, with a ping to the new DRI, in a new root comment, not on a thread\nIf needed, the new DRI should ask clarifying questions on a reply to the comment or in Slack. Setting up a meeting to go over more difficult context would work if timezones aligned.\nDuo/AI Prompt for RFH Handover\nPlease concisely summarize the current status of this issue in order to hand it off to the next backend engineer on customer support duty for the Geo team.\nUse this template:\nA handover comment generated by Duo and reviewed by me:\n### Current status\n\n*Confidence: *\n### Action items\n-\n (*Confidence: *):. (*Confidence: *)\nBe sure, or be conservative. When making assertions, be wary of hallucinations. Use qualifying language as appropriate.\nIf you reference a resource with a URL, such as a GitLab issue or Zendesk ticket number, then make it a link.\nRead linked URLs if the added context might improve your answer.\nAnswer with only Markdown code. I will review it and post it.\nSchedules\nSchedules are tracked in a\nGoogle Sheet(internal link)\n.\nRetrospectives\nRetrospectives are a\ncrucial component\nof the agile methodology. However, having a retro should not be about checking-off a mark in our agile todo list. The purpose of the retro is to learn and then take action that leads to a better place. We learn from our past actions and results and we use that knowledge to improve our future execution.\nAt GitLab there is a general guideline to conduct\ngroup retrospectives\nand a process automation to run retrospectives\nasynchronously\n. The Geo team however is working with a new process that combines elements of fully asynchronous work with the benefits of active conversation and the increased level of engagement that these types of interactions bring.\nThe details of this process is documented in our\nGeo Team Retrospectives\npage.\nFAQ\nWhat work should I pick up next?\nPull from the right. That means, start at the right hand side of the build board, and move towards the left.\nIn order, that means:\nCan you help anyone with reviews?\nCan you unblock anyone in development?\nPick from the top of the ready for development column on the\nKanban Build board\n.\nFeature Flag Management\nRetention Guidelines\nDevelopment Flags\n: 5 milestones maximum, aiming for 4 milestones as a general guidance\nOperational Flags\n: 16 months maximum, aiming for 12 milestones as a general guidance.\nProcess\nDRI Assignment\n: Each feature flag must have a designated owner responsible for cleanup\nRegular Review\n: Monthly check of flags approaching retention limits during team planning\nCleanup\n: Remove flags within retention period or request extension with justification\nFlag Lifecycle\nCreation\n: Use\ngeo_\nprefix, set clear description and expected timeline\nMonitoring\n: Track usage and plan removal during development\nRemoval\n: Clean up code paths and update documentation\nExtensions\nFlags exceeding retention limits require team lead approval with documented justification.\nResources\nTeam Feature Flag Analysis\nGitLab Feature Flag Documentation\nBacklog Cleanup (Trial Phase)\nWe will start to label issues\nclosed:stale\nto mark issues that are in our backlog thats not on\nthe roadmap\nbut could be good ideas.\nAI Prompts used by the team\nCode reviews\nYou are a maintainer at GitLab and a staff level software engineer.\nYou review code in Merge requests based on the guidelines given here https://docs.gitlab.com/development/code_review/ and using conventional comments.\nThe developer guidelines are here https://docs.gitlab.com/operator/developer/guide/\nThe contributor guidelines are here https://docs.gitlab.com/development/contributing/\nFollow the links from all these pages and inform yourself of all the guidelines for contributing to Gitlab as a developer, tester and reviewer.\nTo each of your suggestions/comments please add the technical category of review, e,g, backend, frontend, database, security.\nBase your code reviews on all this information.\nWeekly Status Updates on Epics\nEach week we have to generate a status report of what happened during the week as a changelog on the epic per DRI. The following is an AI prompt that can be used to generate this status report\nGenerate a status update using the following format with markdown and achievements should highlight any closed issues within the last 7 days since the last status update with a short(1 sentence to 2 sentences) summary of what the issue accomplishes for customers. Blockers can be either left empty or use any issues in a status blocked. Next would be any issues that have an assignee and have the status in dev or in review.\n\n:tada:\n**achievements**\n:\n-\n:issue-blocked:\n**blockers**\n:\n-\n:arrow_forward:\n**next**\n:\nLast modified September 8, 2025:\nAdding 3 AI Prompts for Geo team (\n909dfc92\n)\nView page source\n-\nEdit this page\n-\nplease\ncontribute\n.",
  "metadata": {
    "url": "https://handbook.gitlab.com/handbook/engineering/infrastructure-platforms/tenant-scale/geo/process/",
    "title": "Geo and Disaster Recovery - Planning | The GitLab Handbook",
    "scraped_at": "2025-10-26T20:50:48.831490",
    "content_length": 23684,
    "section": "handbook"
  },
  "processing": {
    "original_length": 23684,
    "cleaned_length": 23269,
    "cleaned_at": "2025-10-27T16:13:42.539064",
    "processor": "text_cleaner_v1",
    "word_count": 3949
  }
}