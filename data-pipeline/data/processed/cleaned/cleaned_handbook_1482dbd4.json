{
  "content": "Engineering IC Leadership\nEngineering IC Leadership at GitLab: going beyond Senior level\nAt GitLab, it is expected that everyone is\na manager of one\n. For Individual Contributors (IC) a new type of challenge begins with the Staff Engineer role. Engineering IC Leadership is an alternative\ncareer path\nto Engineering Management.\nJust like moving into management, also moving from Senior to Staff changes the day-to-day work and expectations placed on ICs.\nEngineering IC Leaders exert\ntechnical leverage\nin their\nscope of influence\n.\nLike any other leadership role, the focus should be on helping others to improve.\nTheir impact multiplies with every person they help grow, and the company gets more value when theyre not investing time in doing things themselves.\nTechnical skills developed in their career up until now are still very important, and the role is still hands-on technical. Their technical skills are vast and are developing at a lower rate of change now, but they also get new skills that will drive their career from now on: Communication, Collaboration, and Leadership.\nWhat GitLab Engineers Have to Say About IC Leadership\nDuring a Handbook Learning discussion, Eric (former Chief Technology Officer), Engineering IC Leaders, and the Learning and Development team discuss Engineering IC Leadership. We discuss topics during an interactive handbook discussion about what it means to be an IC leader.\nStart with a level set. You have an intermediate Engineer, then they become a Senior Engineer, and theres a fork in the road. There is a dual career track where you can choose the manager track or the IC Leadership track. - Eric Johnson (former Chief Technology Officer)\nAdditional topics covered in the discussion include:\nWhat does it mean to be an Engineering IC Leader\nWhat are the skills needed to do the job\nHow the role differs from other Engineering management roles\nDifference between technical credibility and technical leverage\nApplying iteration to everything you do\nThe four archetypes and how they define the work of IC Leadership\nTechnical Leverage\nTechnical leverage could be described as doing technical work that has a\nmultiplicative impact. It frequently involves activities that are not writing code.\nIn other words, the impact of the work has a positive effect on more than\nyour personal scope and the immediate or near-term time frame. It should help\nthose around you and in your team, group, or department operate and iterate\nmore efficiently.\nExamples of this are:\nTaking part in our\narchitecture process\nImplementing generic solutions to problems that can be easily reused in the future\nIdentifying commonalities to multiple problems and solving several at once\nSharing knowledge via trainings or presentations to boost efficiency\nIdentifying and removing roadblocks to the development process\nThe four archetypes\nStaff Engineers and Engineering Managers shared their perspective on\nwhat does Staff level mean at GitLab\nin an Unfiltered blog post.\nMuch of what each engineer said overlapped, but each had a unique perspective based on their team and their particular experience within GitLab as an entity.\nThere are\nfour common archetypes of Staff-plus roles in the industry\nthat could explain this variability their perspective:\nThe\nTech Lead\nguides the approach and execution of a particular project. Most frequently they partner closely with a single manager, but sometimes they partner with two or three managers within a focused area. At GitLab, Tech Lead is not only an archetype, but it is also a\nrole\nThe\nArchitect\nis responsible for the direction, quality and approach within a critical area, both today and stretching into the multi-year future horizon. They combine a deep knowledge of technical constraints, user needs, and organization level leadership.\nThe\nSolver\ndigs deep into arbitrarily complex problems and finds an appropriate path forward. Some focus on a given area for long periods, others bounce from hotspot to hotspot as guided by organizational leadership.\nThe\nRight Hand\nis a partner and an extension of an executive-level manager, borrowing their scope and authority to operate particularly complex organizations. They provide additional leadership bandwidth to leaders of large-scale organizations.\nThe four archetypes at GitLab\nThe four archetypes are patterns of behavior\n. We expect our Staff+ ICs to exhibit behavior from all the archetypes. The individual inclination will usually make one (or more) of them more prominent, but they all define Engineering IC Leaders.\nTech Lead\nThe most common archetype for a new Staff Engineer is the Tech Lead, as a\nSenior Engineer may start showing Staff level behaviors emerging from their\nteam. At GitLab, this is not only an archetype but also a role assigned to\nengineers on per-project basis. Read more about this on a dedicated\nTech Lead Handbook page\n.\nA Staff Engineer partners with the Engineering Manager and the Product Manager\nfor milestone planning and helps teammates address complexity with their\ndeliverables. This also applies on levels above Staff+, partnering with their\npeers in Management and Product.\nArchitect\nAt GitLab\nArchitecture is a practice\nwhere\neveryone can contribute\nbut Staff+ Engineers play a fundamental role in that.\nArchitecture as a practice is everyones responsibility, but it is notably ingrained in senior technical leadership roles\n, where the roles levels and their sphere of influence determine DRI responsibilities within the practice.\nSolver\nComplex problems often require a Staff+ Engineer to handle the first iterations in order to reduce the level of complexity to a manageable state.\nRoutinely being handed the hardest, least-specified, or most-uncertain work is part of this archetype. As well as guiding other ICs in the team when theyre struggling to find a solution.\nOther teams may need a Staff+ Engineer on loan\n. The receiving team may or may not already have a Staff+ Engineer, a Solver deals with the problem at hand, and makes sure the team is empowered to take care of the work once the complexity level is manageable.\nRight Hand\nOne of the conclusions from our work on\nArchitecture Practice at GitLab\nis that introducing complex architectural changes can not happen without Staff+ ICs working closely with the decision-makers. This conclusion highlights the need for a close collaboration between Engineering Manager+ and Staff+ Engineers, and it fits very well into the Right Hand archetype definition.\nStaff+ Engineers are supposed to broaden the perspectives of their managers. Decision-makers often need the additional context and perspective to make well-informed decisions about investments in the product architecture, understanding expected ROI, and a core technical vision behind such changes.\nBuilding meaningful relationships based on trust will make this whole process smoother and will distribute leadership, both technical and managerial, at every level, from single teams up to department level.\nTech Lead at GitLab\nTech Lead at GitLab At GitLab, Tech Lead is an archetype and a role. When we think about Tech...\nLast modified April 1, 2025:\nFix broken links (\n1418d490\n)\nView page source\n-\nEdit this page\n-\nplease\ncontribute\n.",
  "metadata": {
    "url": "https://handbook.gitlab.com/handbook/engineering/ic-leadership/",
    "title": "Engineering IC Leadership | The GitLab Handbook",
    "scraped_at": "2025-10-26T20:50:37.510532",
    "content_length": 7228,
    "section": "handbook"
  },
  "processing": {
    "original_length": 7228,
    "cleaned_length": 7219,
    "cleaned_at": "2025-10-27T16:13:42.563000",
    "processor": "text_cleaner_v1",
    "word_count": 1141
  }
}