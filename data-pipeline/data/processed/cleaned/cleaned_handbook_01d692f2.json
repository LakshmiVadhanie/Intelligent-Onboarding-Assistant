{
  "content": "GitLab Password Guidelines\nPasswords at GitLab\nPasswords are one of the primary mechanisms that protect GitLab information systems and other resources from unauthorized use. GitLabs\npassword standard\nis based, in part, on the recommendations by\nNIST 800-63B\n.\nThe password standard sets the requirements for constructing secure passwords and ensuring proper password management. GitLab utilizes 1Password for password management.\n1Password\n1Password is a password manager that can be used in two different ways - as a standalone application (by purchasing a standalone license) or as a hosted service (by subscribing). GitLab uses 1Password for Business which is a hosted service.\nImportant:\nAny personal Passwords stored in your GitLab vault will be inaccessible upon separation with GitLab. Please use the complimentary 1Passsword Families membership subscription that comes with your business account to store any personal passwords. This account will stay with you even in the event that you stop working with GitLab.\nFor more information on how to redeem your free subscription, please follow the steps outlined in\nthis article\n.\nIdeally you memorize one strong password - hence the name - and let 1Password generate and manage strong, unique passwords\nfor every site for which you have a login.\nGitLab requires all team members to use\nOkta\nas a primary entry and access point for SaaS and other company applications while utilizing 1Password for password management. GitLab utilizes Okta for SAML/SSO and passwordless authentication for many applications, so the need to store passwords in a password manager will diminish over time.\nIf you want to use 1Password for your private passwords not related to your work at GitLab,\nthere are a few options\n.\nPlease note our 1Password for Business license agreement\nincludes the 1Password for Families feature\n, which you can share with up to 5 family members.\nFor your Okta password and other passwords that you wont store in Okta, use\n1Password\nas your password manager and set a\nstrong and unique\nmaster password.\nKeep your Master Password a secret. No other team members\nshould know it, including admins. If the Master Password is known or\ndisclosed to someone else, it should be changed immediately.\nPost a message in #it_help if you forget your Master Password.\nConsider using a generated Master Password. Most human-created passwords\nare easy to guess. Let 1Password create a strong Master Password. But: you\nwill\nneed to memorize this Master Password.\nDo not let your password manager store the\nmaster password\n. It is okay to\nstore the username.\nFor more information, review\n1Passwords Getting Started guide\nand view\nthis video\nthat guides you through the sign-up process.\nFor account administrators, review\n1Passwords admin guide\n.\nTerminology\nFollowing this guide, it will be helpful to understand a few terms well be\nusing throughout.\nApp:\nA native 1Password application (macOS, iOS, Windows, Android).\nExtension:\nA web browser extension/plugin that communicates with the\nApp\nto provide access to your passwords securely without leaving the\nbrowser.\nVault:\nWhat 1Password calls any grouping of secure data, such as logins or\nsecure notes. Sometimes called a keychain.\n1Password guidelines\nIf you install the macOS application, install 1Password via this link\n1Password\nIf you have a YubiKey, it can be added as a 2-factor\nmethod to your 1Password account for convenience.\nWhen traveling, consider using 1Password in Travel Mode, see more on that\nbelow\n.\nDo not share credentials via email, issue comments, chat etc. This includes\nemail addresses to login and API keys. Use 1Password vaults for this and if sharing a one-off password, the built-in Share feature.\nIf you do not have access to a vault create an\naccess request issue\n.\nUse Watchtower to find passwords that need to be changed. Watchtower tells\nusers about password breaches and other security problems on the websites they\nhave saved in 1Password Teams, so users can take action. This is not something\naccount administrators can review for team members, so it is up to you to enable!\nEnable Watchtower by going to your 1Password app and then to\nPreferences  Watchtower\n.\nUse the Security Audit\nfunctionality of 1Password to meet the\npassword standard\n.\nIt will report reused passwords, weak passwords, accounts that\nare missing 2-factor authorization, and so forth that can then be fixed.\nDo not copy passwords from inside a 1Password vault to a personal password\nvault or other password store. 1Password should be the only password\nvault used for teams. Team passwords should not be duplicated or placed in\npersonal password vaults where they can potentially be exposed to compromise.\nWhen asked security questions (what is your favorite pet, etc.) do not answer\ntruthfully since that is easy to research. Make up an answer and write both the\nquestion and answer in 1Password. Consider using the Password Generator function\nin 1Password for this.\nDuring offboarding, your 1Password account is deleted, which includes the\nEmployee\nvault in the GitLab team account. If you want to keep your personal\npasswords, please copy/move them to your\nPrimary\nvault which you will have\nif you signed up for an\nindividual account\nbefore\njoining the GitLab Team account.\nDeprecated\nWhen documenting the location of shared credentials in the handbook refer to the items with NAME_OF_SITE credentials in VAULT_NAME. For example:\nfor access please see the AOL credentials in the Luddite vault.\nDeprecation note: This is for existing accounts only. New accounts should\nbe created by\ncreating an issue\nto add it to Okta.\n1Password for teams\n1Password for Teams stores all\nVaults\non the 1Password servers and allows\nfor sharing between multiple people on the same team. Every GitLab team member who needs access to a shared vault should consult their departments for any shared vault information.\nEach member of the team has a vault called\nEmployee\nwhich\nonly you can see\n, and allows you to store personal credentials\nwithin the GitLab teams account\n.\nTo really get the full benefit of 1Password, youll need to hook our Business\naccount up to one of the native apps.\nAdding the GitLab team to a 1Password app\nThis guide will cover setting up the\nmacOS app\n. Its their lead platform and is\nthe most up-to-date. These instructions may or may not work for the Windows\nversion. If you use 1Password 6 without a 1Password.com account, make note of\nthis\n.\nDownload and install the 1Password\nmacOS app\n.\nLaunch the app.\nClick Sign in to your 1Password account button. If there is no such button\nplease follow the instructions for\nupdating 1Password\n.\nNow youll need the\nEmergency Kit\nPDF that 1Password told you to save when\nyou registered your\nBusiness\naccount. Note: Store the Emergency Kit safely.\nStore a copy of the Emergency Kit on a USB flash drive or print a copy and store\nit in a vault at home or safe deposit box somewhere not online or accessible\nby anyone other than yourself.\nIf you saved it as a digital PDF file:\nOpen the PDF file\nClick\nScan QR Code\nOpen the PDF file with the scanner by clicking on the camera icon\nIf you printed the PDF:\nClick\nSign In Manually\nFor\nTeam URL\nenter\ngitlab.1password.com\nFor\nAccount Key\nenter the Account Key from your Emergency Kit\nFor\nEmail Address\nenter your\n@gitlab.com\nemail\nFor\nMaster Password\nenter the password to your\nTeams\naccount (\nnot\nthe password you created above when you chose Im a new user)\nAfter the Team is added, you should see some notifications about vaults being\nadded to 1Password. By default youll have the\nPrivate\nvault, but\nmay have access to others.\nShared Vault Etiquette\nIn general, 1Password items should be self-documenting. This is especially important for items in team vaults such as those to which a team member gains access once part of the GitLab team or they are granted access via their baseline entitlements issue. Always make sure the\ntitle\n,\nusername\n, and\nnotes\nfields are meaningful.\nDeleting items is fine as they are kept in the recently deleted tab indefinitely. Its also fine to leave them in their respective vault but delete the account on the system associated with the item. In the second case, and in order to prevent confusing team members, edit the title (e.g.\n[Deleted on 2024-02-14]\n) to reflect the purposeful deletion of the account and explain briefly who and why removed it in the notes.\nVaults\nClick the\nVault Selector\nin the upper-left corner of the window:\nGitLab team members have access to a\nEmployee\nvault by default, which is your\nhosted, private\nvault that is part of the GitLab 1Password for Teams account. Since the Employee vault is part of the\nGitLab Business account, it should be thought of as company property (like the\n@gitlab.com email account), however the vault\ncannot\nbe viewed by anyone\nelse on the team, including admins. If you choose to store truly personal\ninformation in the Employee vault, it opens up the possibility that you would\nbe separated from this information if you offboard. Such truly personal\ninformation is therefore better to store in your\nPrimary\nvault, which is\nassociated with you instead of with the GitLab Teams account, assuming that you\nadded an\nindividual account\n.\nPeople may request access to other vaults such as shared vaults that their teams/departments have created.\nBrowser extension\nGo to\nBrowser extensions\nand\ninstall the extension for whatever browser youre using. You\nshould not\nneed a\nbeta version here.\nWith the extension installed, you should be able to go to a site that you have\ncredentials stored for in 1Password and log in:\nIf you dont see the site listed in the results window, make sure youre using\nthe correct vault:\nSaving logins\nWhen 1Password detects a login form submission, it may ask if you want to save\nthe login with a dialog like this:\nIf you do want to save it, make sure the appropriate\nVault\nis selected\nfirst.\nManaging SSH keys\nStarting with version 8, 1Password can operate as the single source of truth for your SSH keys. This includes generating private keys, storing them securely, filling your public keys in to sites like GitLab.com, and unlocking the keys automatically when performing git operations.\nMore information is available\nin the official documentation\n.\nCLI integration\nDuring development it is often necessary to use test secrets locally on your development machine.\nEven though these secrets have a limited scope of access, its still best practice to avoid writing them unencrypted to disk.\nManually loading them into environment variables or using them for CLI commands directly also risks them being written to disk as part of your shell history.\nFor a more secure approach, use 1Passwords CLI utility which can help manage local secrets securely.\n1Password CLI integration\nsupports secure\nhandling of secrets used in command line tools, config files, and scripts executed on your laptop.\nTo setup the CLI integration, follow the\ngetting started guide\n.\nIt is recommended to store secrets such as\npersonal access tokens\nin 1Password. Avoid storing secrets in unencrypted files or using them directly\non the CLI. Many shells write a command history to disk and where the secret is\nused literally on the command line this will be written to the command history\nunencrypted.\nExample for configuring\nglab\nwith 1Password CLI (requires 1password version 8 or higher):\nStore your access token in 1Password. In the entry for your GitLab account, create a new section\npat\nand add a field\napi\n. Insert the value of your PAT into the newly created field\napi\n.\nStore a secret reference to the access token in an\n.env\nfile.\nThe environment variable name goes before the equals sign, and the path to the secret in 1Password goes after.\nYou can store multiple variable secret pairs per file when you need to use\nsecrets together.\nThe paths can be obtained by viewing the credential in the 1Password GUI, clicking the dropdown menu and selecting Copy Secret Reference.\n## format is op://vault-name/item-name/[section-name/]field-name\necho\n\"GITLAB_TOKEN=op://Private/GitLab/pat/api\"\n\n$HOME\n/.gitlab-pat.env\nRun processes using the secrets\nWhen running processes which need the secrets, run it under the control of 1Password, so it can pass the variables correctly.\nTo do this, prepend\nop run --env-file=\"\" --\nto the command you wish to run, and replace any secrets with the relevant variable\nSo for example\nglab api version\nwould become:\nop run --env-file\n=\n$HOME\n/.gitlab-pat.env -- glab api version\nWhere the process is interactive or has dynamic output (progress bars, etc) you may need to disable masking to make the display work correctly. You can do this by adding\n--no-masking\nManually adding\nop run\nevery time for common tasks is cumbersome, so check out\nthe\ntools and tips\nsection for more user-friendly configurations.\nSeveral accounts and unlocking the app\nIf you are planning to use both the GitLab team account and a separate\nindividual account you should first add your separate individual account to the\napp first (Preferences  Accounts). By doing this you will be able to unlock\nthe 1Password app using the Master Password of the individual account.\nIf you were using 1Password before joining GitLab, and you receive a prompt\ntitled\nMigrate To Account\n, choose\nIll move later\n. There is no harm in\ndoing this, and it is easy to move items between vaults.\n1Password for your private passwords\nYou are encouraged to use 1Password for your private passwords, not related to\nyour work at GitLab.\nThis makes it less likely for a security breach to occur. You can purchase a\nstandalone license or start an individual subscription, or take advantage of the\ncomplimentary 1Password for Families feature\n,\nwhich you can share with up to 5 family members.\nTwo factor authentication and time-based one time passwords\nAs stated in the\nGitLab Password Standards\n, the usage of 2FA is mandatory for all GitLab team members.\nUsers without 2FA enabled that are stale for over 30 days will be blocked/suspended until resolved. This improves the security posture for both the user and GitLab.\nIf any systems provide an option to use SMS text as a second factor, this is highly discouraged. Phone company security can be easily subverted by attackers allowing them to take over a phone account.\nOkta is configured such that it only supports the use of WebAuthn. 1Password TOTP should only be used when WebAuthn is unavailable.\nA FIDO2/WebAuthn hardware token can be used as a secure and convenient 2-factor authentication method for Okta, Google Workspace, GitLab instances, and many other sites. If you do not have one, you may request one via the\nYubibot\n. GitLabs standard is Yubicos YubiKey. For more information on FIDO2/WebAuthn, visit the\nTools and Tips page\n.\nIf shared access to a single account is required by multiple team members, for example, a social media account, an Okta\nnew application setup Issue\nshould be created. The credentials will be stored and shared via Okta.\nIf you find an existing shared account in 1Password,\ncreate an Issue\nto get it migrated to Okta.\n1Password provides an alternative solution that does not\nrequire using your smartphone: 1Password Time-based One Time Passwords\n(TOTP). 2FA codes are displayed directly in the 1Password app running on your\nlaptop (Note: this can not be set up via 1Password browser extension or 1Password web app).\nTo enable TOTP for a saved account:\nOpen 1Password app\nGo to the item for which you want to set up TOTP\nClick\nEdit\nin the bottom right corner\nAdd a new field by clicking on the field type dropdown (it offers a Text field by default)\nSelect\nOne-Time Password\nClick QR code icon that appeared\nScan QR code using the transparent window\nClick\nSave\n2FA code should be displayed now\nPlease refer to demo video\n1password TOTP setup\nPlease refer to the\n1Password blog\nfor more information on how TOTP works.\nIf scanning the QR code using the transparent window with the 1Password Mac\napp fails on a recent macOS, please consider using the 1Password iOS app instead.\nThis mechanism works the same way, and supports Touch ID to login.\nIf unsure which mechanism to use, we require using WebAuthn (when possible) as a TOTP for 2FA.\nFollow this\nguideline\nwhen getting a new mobile device, if you are using Google Authenticator as a TOTP mechanism.\nThere may be cases where TOTP might be used with a non-GitLab account. If you have any questions and need to speak with the Security Team, you can contact\nSecurity\nPasskeys\n1Password has implemented a feature supporting for Passkeys, which are the credentials used in FIDO2/WebAuthn on sites such as\nOkta\n. This feature can allow passwordless sign in to sites that require username and password. Passkeys can also serve as a type of MFA. Passkeys store a public key in the app and a private key within the 1Password vault.\nSetting up Passkey is simple. Open a login page or select the sign in button on the website or app. Youll typically see a prompt to complete an authentication step, usually with Biometrics, or YubiKey. You may see something like the image below.\nAt that point, the key pairing is created and 1Password will use this method of sign in going forward. Note, not all sites are supported at this time. If youre curious about setting this up on a site you use, you can always open 1Password, select that login tab, and see if the Passkey Available notification is showing.\nYou may need to follow different steps with the specific sites in order to complete Passkey setup, follow the prompts of the site and 1Password and youll be set for logging in with a Passkey via 1Password.\nExample usage\nThis is an example of how\nRobert\n,\none of our developers, uses 1Password:\nOnce you fully commit to using 1Password to manage all of your security\ninformation, it really does make life easier.\nI memorize one strong password and let the app generate\neverything else. Every site I use has a unique password that I cant\ncompromise because I dont even know it, and a hacked site cant compromise\nit because the password is never re-used on another site.\nI store my shipping and credit card info in 1Password and use the browser\nextension to quickly fill out shipping and billing information on shopping\nsites.\nI store my passport data, along with a digital scan, in 1Password; drivers\nlicense info and scan; insurance info; software license keys; any important\ninformation that needs to be secure but still easily accessible when I need it,\nfrom anywhere. I sync my personal vault to my personal iCloud so its\navailable on my phone, tablet, laptop, and desktop.\nEven my 1Password for Teams account information is stored in my personal\nPrimary\nvault, with the Emergency Kit PDF as a secure attachment.\nI have no idea what the password is. Ive never actually typed it. And thats\nthe idea:\nTraveling with 1Password\nWhen traveling with a device that has access to the GitLab 1Password vaults, be\nsure to\nenable Travel Mode\nin 1Password. Travel Mode removes copies of any\n1Password vaults that are not tagged as safe for travel from your mobile devices.\nNone of the GitLab shared vaults are marked as safe for travel so you will need\nto either create a dedicated travel vault or mark your Private vault as safe for\ntravel.\nOnce you have enabled Travel Mode open 1Password on each device you will be taking\nwith you so that it can sync with 1Password.com and remove any vaults that cannot\nbe used while traveling.\nFor more information on Travel Mode and how it works, see the\nAgileBits blog\n.\nSecuring Docker Registry User Credentials\nDocker can store user credentials in an\nexternal credential store\nas a more secure alternative to storing credentials in the Docker configuration file.\nUsing\nosxkeychain\n(macOS)\nTo configure Docker to use\nosxkeychain\nfor secure credential storage, follow these steps:\nInstall the\ndocker-credential-osxkeychain\nhelper via Homebrew:\nbrew install docker-credential-helper\nConfigure\n/.docker/config.json\nto\nuse\nosxkeychain\nas your Docker credstore\n:\n{\n\"credsStore\"\n:\n\"osxkeychain\"\n}\nLog in using\ndocker login registry.gitlab.com\n, and enter your email and password (PAT) when prompted.\nValidate that the credentials were not saved as base64-encoded text in\n/.docker/config.json\n.\nUsing\npass\n(Linux)\nPrerequisites\nCreate a GPG key\nInstall\npass\nTo configure Docker to use\npass\nfor secure credential storage, follow these steps:\nDownload the latest\ndocker-credential-pass\nbinary from\nthe releases page\n.\nMake the\ndocker-credential-pass\nbinary executable with\nchmod +x docker-credential-pass\n.\nMove the\ndocker-credential-pass\nbinary to your\n$PATH\n(e.g.,\nsudo mv docker-credential-pass-v0.8.0.linux-amd64 /usr/local/bin/docker-credential-pass\n).\nObtain and copy the GPG key ID that\npass\nwill use for encryption via\ngpg --list-secret-keys --keyid-format LONG\n.\nInitialize\npass\nwith\npass init \n.\nConfigure\n/.docker/config.json\nto\nuse\npass\nas a credstore\n:\n{\n\"credsStore\"\n:\n\"pass\"\n}\nLog in using\ndocker login registry.gitlab.com\n, and enter your email and password (a valid\ntoken\n) when prompted.\nValidate that the credentials were not saved as base64-encoded text in\n/.docker/config.json\n.\nLast modified October 3, 2025:\nMore policy reorganization (\n10563f30\n)\nView page source\n-\nEdit this page\n-\nplease\ncontribute\n.",
  "metadata": {
    "url": "https://handbook.gitlab.com/handbook/security/password-guidelines/",
    "title": "GitLab Password Guidelines | The GitLab Handbook",
    "scraped_at": "2025-10-26T20:51:23.850346",
    "content_length": 21349,
    "section": "handbook"
  },
  "processing": {
    "original_length": 21349,
    "cleaned_length": 21249,
    "cleaned_at": "2025-10-27T16:13:42.529108",
    "processor": "text_cleaner_v1",
    "word_count": 3520
  }
}