{
  "content": "GitLab Values\nLearn more about how we live our values at GitLab\nCREDIT\nGitLabs six core values are\n Collaboration\n,\n Results for Customers\n,\n Efficiency\n,\n Diversity, Inclusion & Belonging\n,\n Iteration\n, and\n Transparency\n,\nand together they spell the\nCREDIT\nwe give each other by assuming\ngood intent. We react to them\nwith values emoji\nand they are made actionable below.\nAbout our values\nWe take inspiration from other companies, and we always go for the\nboring solutions\n. Our co-founder, Sid Sijbrandij, has\nshared the origin\nof each of the CREDIT values, but\njust like the rest of our work, we continually adjust our values and strive to make them better.\nGitLab values are a living document.\nIn many instances, they have been documented, refined, and revised based on lessons learned (and scars earned) in the course of doing business.\nWe used to have more values, but it was difficult to remember them all. In response, we condensed them, created an acronym (CREDIT), and listed operating principles to guide behavior.\nEveryone is welcome to suggest improvements. Please assign MRs to update these values to our\nChief People Officer\nand if you work at GitLab, also @mention them in the\n#values\nSlack channel\n.\nDriving Results with CREDIT\nfrom\nGitLab\non\nVimeo\n.\n Collaboration\nTo achieve results, team members must work together effectively. At GitLab, helping others is a priority, even when it is not immediately related to the goals that you are trying to achieve.\nSimilarly, you can rely on others for help and advicein fact, youre expected to do so.\nAnyone can chime in on any subject, including people who dont work at GitLab.\nThe person whos responsible for the work decides how to do it,\nbut they should always take each suggestion seriously and try to respond and explain why it may or may not have been implemented.\nKindness\nWe value caring for others.\nDemonstrating we care for people provides an effective framework for challenging directly and delivering feedback.\nKindness doesnt mean holding back on feedback or avoiding disagreements, these are crucial to professional growth and getting results for customers.\nKindness means you make a separation between the work and the person, you can criticize someones work but still be respectful to the person.\nGive as much positive feedback as you can, and do it in a public way.\nShare\nThere are aspects of GitLab culture, such as intentional transparency, that are unintuitive to outsiders and new team members.\nBe willing to invest in people and engage in open dialogue.\nFor example, consider making private issues public wherever possible so that we can all learn from the experience. Dont be afraid of judgement or scrutiny when sharing publicly, we all understand\nits impossible to know everything\n.\nEveryone can\nremind\nanyone in the company about our values.\nIf there is a disagreement about the interpretations, the discussion can be escalated to more people within the company without repercussions.\nShare problems you run into, ask for help, be forthcoming with information and\nspeak up\n.\nNegative feedback is 1-1\nGive negative feedback in the smallest setting possible.\nOne-on-one video calls are preferred.\nNegative\nfeedback\nis distinct from negativity and disagreement. If there is no direct feedback involved, strive to discuss disagreement\nin a public channel\n, respectfully and\ntransparently\n.\nIn a\nGitLab Unfiltered interview on values\n, GitLab co-founder Sid Sijbrandij offers the following context.\nWe deal with negative all the time at GitLab. If its not a problem, then why are we discussing it? We deal with negativity a lot, and thats also part of our ambition.\nIf you want to get better, you talk about what you can improve. Were allowed to publicly discuss negative things; were not allowed to give negative feedback in a large setting if it could be feasibly administered in a smaller setting.\nNegative feedback can be given in a group setting if its to someone higher in the management chain. This shows that no one is above feedback.\nProvide feedback in a timely manner\nWe want to solve problems while they are\nsmall\n.\nIf you are unhappy with anything (your duties, your colleague, your boss, your salary, your location, your computer), please voice your concerns rather than keeping them to yourself. If you need to escalate beyond your manager, you could consider speaking to your\nskip-level\n, a more senior person, or a\npeople business partner\n.\nSay thanks\nRecognize the people that helped you publicly, for example in our\n#thanks chat channel\n.\nWhen publicly thanking, its important to recognize the following:\nShowing thanks in as large a setting as possible (company-wide) at a company as large as ours is the exception instead of the norm, it takes some getting used to.\nBeing thanked at the company level for what you view as a relatively small or minuscule contribution can feel awkward.\nThanking a person in\n#thanks\nshould be done sincerely and summarize why you are thankful so the person on the receiving end can easily understand why they are being thanked. Even while\nassuming positive intent\n, not all folks are comfortable with public praise. Help this person understand how they went above and beyond and why you felt it was important for the team member to be recognized.\nThere are a number of good ways and places to say thanks. We shouldnt limit saying thanks to just the\n#thanks\nchannel\n.\nGive feedback effectively\nGiving feedback is challenging, but its important to deliver it effectively.\nWhen providing feedback, always make it about the work itself;\nfocus on the business impact and not the person.\nMake sure to provide at least one clear and recent example.\nIf a person is going through a hard time in their personal life, then take that into account.\nAn example of giving positive feedback is our\nthanks chat channel\n.\nFor managers, its important to realize that team members react to a negative incident with their managers\nsix times more strongly\nthan they do to a positive one.\nKeeping that in mind, if an error is so inconsequential that the value gained from providing criticism is low, it might make sense to keep that feedback to yourself.\nIn the situations where negative feedback must be given, focus on the purpose for that feedback: to improve the team members performance going forward.\nGive recognition generously, in the open, and often to\ngenerate more engagement\nfrom your team.\nGet to know each other\nWe use a lot of\ntext-based communication\n, and if you know the person behind the text, it will be easier to prevent conflicts.\nSo we encourage people to get to know each other on a personal level through\ninformal communication\n, for example, virtual\ncoffee chats\n, and during\nGitLab Summit\n.\nReach across company departments\nWhile its wise to seek advice from experts within your function, we encourage GitLab team members to do the same across departments. This enables the company to iterate more quickly, embrace the understanding that everyone can contribute and include more diverse perspectives when possible.\nDont pull rank\nIf you have to remind someone of the position you have in the company, youre doing something wrong.\nPeople already know\nour decision-making process\n.\nExplain why youre making the decision, and respect everyone irrespective of their function.\nThis includes using the rank of another person -\nincluding the CEO\n- to sell an idea or decision.\nAssume positive intent\nWe naturally have a double standard when it comes to the actions of others.\nWe blame circumstances for our own mistakes, but individuals for theirs.\nThis double standard is called the\nFundamental Attribution Error\n.\nIn order to mitigate this bias, you should always\nassume positive intent\nin your interactions with others, respecting their expertise and giving them grace in the face of what you might perceive as mistakes.\nWhen\ndisagreeing\n, folks sometimes argue against the weakest points of an argument, or an imaginary argument (e.g.\nstraw man\n). Assume the points are presented in good faith, and instead try to argue against the strongest version of your opponents position. We call this arguing against a steel position, instead of a straw one. This concept is borrowed from\nargue the steel man\ntechnique.\nA steel position should be against the absolute most effective version of your opponents position potentially even more compelling than the one they presented. A good steel position is one where the other person feels youve represented their position well, even if they still disagree with your assumptions or conclusion.\nAddress behavior, but dont label people\nThere is a lot of good in\nthis article\nabout not wanting jerks on our team, but we believe that\njerk\nis a label for behavior rather than an inherent classification of a person. We avoid classifications.\nSay sorry\nIf you made a mistake, apologize as soon as possible.\nSaying sorry is not a sign of weakness but one of strength.\nThe people that do the most work will likely make the most mistakes.\nAdditionally, when we share our mistakes and bring attention to them, others can learn from us, and the same mistake is less likely to be repeated by someone else.\nMistakes can include when you have not been kind to someone. In order to reinforce our values, it is important, and takes more courage, to apologize publicly when you have been unkind publicly (e.g., when you have said something unkind or unprofessional to an individual or group in a Slack channel).\nNo ego\nDont defend a point to win an argument or double-down on a mistake.\nYou are not your work; you dont have to defend your point.\nYou do have to search for the right answer with help from others.\nIn a GitLab Unfiltered\ninterview\n, GitLab Head of Remote Darren M. adds context on this operating principle.\nIn many organizations, theres a subtle, low-level, persistent pressure to continually prove your worth.\nAnd I believe that this fuels imposter syndrome and wreaks havoc on\nmental health\n.\nWhats so troubling to me is how often perception is reality.\nIn other words, those who have mastered the art of being perceived as elite reap benefits, though this has nothing to do with actual results.\nAt GitLab, no ego means that we foster and support an environment where results matter, and youre given agency to approach your work in the way that makes sense to you.\nInstead of judging people for not approaching work in an agreed-upon way, no ego encourages people to glean inspiration from watching others approach work in new and different ways.\nSee others succeed\nA candidate who has talked to a lot of people inside GitLab said that, compared to other companies, one thing stood out the most: everyone here mentioned wanting to see each other succeed.\nDont let each other fail\nKeep an eye out for others who may be struggling or stuck.\nIf you see someone who needs help, reach out and assist. This might involve offering to\npair program\nor setting up a sync brainstorming session. The goal is to connect them with someone else who can provide expertise or assistance.\nWe are a team, so we succeed and shine together by supporting each other!\nPeople are not their work\nAlways make suggestions about examples of work, not the person.\nSay You didnt respond to my feedback about the design instead of You never listen.\nAnd, when receiving feedback, keep in mind that feedback is the best way to improve, and that others giving you feedback want to see you succeed.\nDo it yourself\nOur collaboration value is about helping each other when we have questions, need critique, or need help.\nNo need to brainstorm, wait for consensus, or\ndo with two what you can do yourself\n. The Bolt Handbook refers to this as the\nFounder Mentality\n, where all team members should approach the problem as if they own the company.\nBlameless problem solving\nInvestigate mistakes in a way that focuses on the situational aspects of a failures mechanism and the decision-making process that led to the failure, rather than cast blame on a person or team.\nWe hold blameless\nroot cause analyses\nand\nretrospectives\nfor stakeholders to speak up without fear of punishment or retribution.\nShort toes\nPeople joining the company frequently say, I dont want to step on anyones toes.\nAt GitLab, we should be more accepting of people taking initiative in trying to improve things.\nAs companies grow, their speed of decision-making goes down since there are more people involved.\nWe should counteract that by having short toes and feeling comfortable letting others contribute to our domain.\nFor example, pointed, respectful feedback to a\nproposal\nby GitLabs CEO led to his own merge request being closed. However, it is not required to respond to comments.\nIts impossible to know everything\nWe know we must rely on others for the expertise they have that we dont.\nIts OK to admit you dont know something and to ask for help, even if doing so makes you feel vulnerable.\nIt is never too late to ask a question, and by doing so, you can get the information you need to produce results and to strengthen your own skills as well as GitLab as a whole.\nAfter your question is answered,\nplease document the answer so that it can be shared\n.\nDont display surprise when people say they dont know something, as it is important that everyone feels comfortable saying I dont know and I dont understand.\n(As inspired by\nRecurse\n.)\nCollaboration is not consensus\nWhen collaborating, it is always important to stay above radar and work\ntransparently\n, but collaboration is\nnot consensus\nand disagreement is part of collaboration.\nYou dont need to ask people for their input, and they shouldnt ask you Why didnt you ask me?.\nYou dont have to wait for people to provide input, if you did ask them.\nYou dont need to have everyone agreeing to the same thing - they can\ndisagree, commit, and advocate\n.\nTwo-way doors decisions\ncan be reversed as part of\ndisagree, commit, and advocate\n, while one-way door decisions benefit from more input. Recognize these reversible two-way door decisions for when less input is required to iterate faster.\nWe believe in permissionless innovation you dont need to involve people, but everyone can contribute.\nThis is core to how we\niterate\n, since we want smaller teams moving quickly rather than large teams achieving consensus slowly.\nCollaboration Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate collaboration when we take action to help others and include others (both internal and external) input (both help and feedback) to achieve the best possible outcome.\nGitLab Job Grade\nDemonstrates Collaboration Competency by...\nKnowledge Assessment\n5\nDevelops collaboration skills by learning from other team members\nKnowledge Assessment for Individual Contributors\n6\nGrows collaboration skills by using different types of communication; files issues appropriately, asks in the right Slack channels and uses the right labels.\n7\nModels collaborative behavior for fellow team members and others within the group.\n8\nCoaches team members on how to collaborate more effectively and pointing team members to the right channels to collaborate.\nKnowledge Assessment for People Leaders\n9\nFosters collaborative decision making and problem solving across the departments.\n10\nDrives team collaboration across divisions/departments, silos, and division boundaries.\n11\nDevelops networks and builds partnerships, engages in cross-functional activities; collaborates across boundaries, and finds common ground with a widening range of stakeholders. Utilizes contacts to build and strengthen internal support base\n12\nLeads collaboration and teamwork in daily routines, prioritizing interactions, information sharing, and real time decision making across divisions/departments. Encourages greater cross-functional collaboration among e-team leaders.\n14\nChampions collaboration and teamwork into daily routines, prioritizing interactions, information sharing, and real time decision making across divisions/departments. Champions cross-functional collaboration among e-team leaders and GitLab.\n Results for Customers\nWe exist to help our customers achieve more. Everything we do should be in service of making our customers successful with GitLab. Results for Customers is at the top of our values hierarchy, as our customers achieving results drives overall business performance that enables everything else.\nThe Results for Customers value is displayed through the following operating principles:\nSet Ambitious & Measurable goals\nWhile we iterate with small changes, we strive for large, ambitious results. We have an ambitious\nmission\nand\nvision\n, and we aim to be the best in the world across all our functions. Setting ambitious, measurable goals enables us to best deliver customer results. We agree in writing on measurable goals. We have and report against\nKPIs\nwith guiding targets.\nUnderstand our customers\nAll GitLab team members should understand our customers needs, issues, and value propositions. We understand how they use GitLab and what they need from a platform in order to meet their goals. Internally facing teams consider the impact of their work as it pertains indirectly to GitLabs customers.\nWe better understand customers and their needs through:\nReviewing public facing GitLab issues from our customers and users\nDogfooding\nour product to understand the user experience\nReading customer stories from Marketing and Sales\nAttending Customer fireside chats\nLearning feedback from our customers and users on product features and roadmap\nCo-create\nWe create together with our customers. There is an open dialogue between GitLab and our customers so that we can better identify what they need. As a result of building a solution for them, we can also bring that solution to the world.\nKeep end users in sight\nOur focus is to increase customer results. At GitLab, one way to drive customer results is through platform enhancements that drive the most value for direct users. This requires being aware of\nthe Concur effect\n.\nArvind Narayanan\n, a Princeton Professor, described his frustration with Blackboard in a viral Tweet:\nIt has every feature ever dreamed up. But like anything designed by a committee, the interface is incoherent and any task requires at least fifteen clicks (and thats if you even remember the correct sequence the first time).\nSoftware companies can be breathtakingly clueless when theres a layer of indirection between them and their users. Everyone whos suffered through Blackboard will have the same reaction to this: try having less functionality!\nRyan Falor\nfollowed up on Narayanans tweet with his definition of the Concur Effect:\ndecision makers are not direct users\nfeatures are overwhelming and disjointed\nuser experience gets worse over time\nSee\nthe Hacker News discussion\nfor a specific UX example.\nAt GitLab, we want to drive customer results through focusing on platform enhancements that drive the most value for direct users.\nCustomer results are more important\nthan:\nWhat we plan to make\n. If we focus only on our own plans, we would have only GitLab.com and no self-managed delivery of GitLab. This does not mean that we will agree to every feature request, but we wont let existing plans be an obstacle to working on what will drive the most customer value.\nLarge customer requests\n. Catering to requests from large customers leads to the\ninnovators dilemma\n, we need to also focus on results for small and future customers.\nOur existing scope\n. For example, when customers asked for better integrations and complained about integration costs and effort, we responded by expanding our scope to create a\nsingle application\nfor the DevOps lifecycle.\nOur assumptions\n. Every company works differently, so we cant assume that what works well for us will support our customers needs. When we have an idea, we must directly validate our assumptions with multiple customers to ensure we create scalable, highly relevant solutions.\nWhat we control\n. We strive to provide the best possible experience for each of our customers, and take responsibility for all of the aspects that we can reasonably control.\nMeasure impact, not activity\nWe care about what you achieve: the code you shipped, the needle you moved, the user you made happy, and the team member you helped. Someone who took the afternoon off shouldnt feel like they did something wrong, unless it negatively impacted a goal or result they were responsible for. You dont have to defend how you spend your day if you are performing and delivering against expectations. We trust team members to do the right thing instead of having rigid rules. We trust team members to show up and do their best work. Do not incite competition by proclaiming how many hours you worked yesterday. If you are working too many hours, talk to your manager to discuss solutions.\nDogfooding\nWe\nuse our own product\nin the way our users do to surface improvements that will lead to better\ncustomer results\n. GitLab is a DevSecOps Platform that can be used by people throughout the business. This is how we use it within GitLab. For example, we use our OKR functionality company-wide to inform product enhancements and for team members to have a great understanding of the customer experience. We also dogfood in the following ways:\nOur development organization uses GitLab.com to manage the DevOps lifecycle of GitLab itself.\nAll team members use GitLab to collaborate on this handbook.\nWe capture content and processes in Git repos and manage them with GitLab.\nWhen something breaks, doesnt work well, or needs improvement, we are more likely to notice it internally and address it before it impacts our larger community.\nGive agency\nWe give people agency to focus on what they think is most beneficial. If a meeting doesnt seem interesting and someones active participation is not critical to the outcome of the meeting, they can always opt to not attend, or during a video call they can work on other things if they want. Staying in the call may still make sense even if you are working on other tasks, so other peers can ping you and get fast answers when needed. This is particularly useful in multi-purpose meetings where you may be involved for just a few minutes.\nChallenger mindset\nChallenging the status quo can lead to remarkable results - we must never stop. A\nchallenger mindset\nrequires that we continually ask ourselves bold, difficult questions about our business and the problems we solve, while resisting complacency. To succeed we must innovate and delight our customers with the value of the products we build. A challenger mindset requires a relentless pursuit of excellence - we must be\ntenacious\n. Each win for our customers builds reputational capital we can use to earn the trust of prospects in a competitive market. While competition is a feature of capitalism, internally as GitLab team members, we must focus our efforts inwardly on achieving our very best results for customers to win market share.\nGrowth mindset\nYou dont always get results and this will lead to criticism from yourself and/or others. We believe our talents can be developed through hard work, targeted training, learning from others, on-the-job experience, and receiving input from others. It is in our DNA as a company and individuals to look for opportunity, stay humble, and never settle. We try to hire people based on\ntheir trajectory, not their pedigree\n. We also strive to foster a culture of curiosity and continuous learning where team members are provided and proactively seek out opportunities to grow themselves and their careers. We believe that with the right expectations and direction, people can grow to take on new challenges and surpass expectations.\nCross-functional optimization\nOur definition of cross-functional optimization is that you do what is best for the organization as a whole. Dont optimize for the goals of your team when it negatively impacts the goals of other teams, our users, and/or the company. Those goals are also your problem and your job. For example, you may have set a non-urgent functional milestone that is supposed to land at the end of the quarter. If delivering within the last week requires engagement from\nthe GTM teams\n, the right decision may be to push your own teams target by a week to reduce the ask for the GTM team as the GTM focuses on meeting its revenue objectives.\nIn the context of\ncollaboration\n, if anyone is blocked by you on a question, your approval, or a merge request review, you should prioritize unblocking them, either directly or through helping them find someone else who can.\nEmbrace Tenacity\nWe refer to this as persistence of purpose. As talked about in\nThe Influence Blog\n, tenacity is the ability to display commitment to what you believe in. You keep picking yourself up, dusting yourself off, and quickly get going again having learned a little more. We value the ability to maintain focus and motivation when work is tough and asking for help when needed.\nHave Ownership & Accountability\nWe expect team members to complete tasks that they are assigned. You are responsible for executing with attention to detail, connecting the dots across the organization and anticipating and solving problems. As an owner, you are responsible for overcoming challenges, not suppliers or other team members. Take initiative and proactively inform stakeholders when there is something you might not be able to solve.\nSense of urgency\nTime gained or lost has compounding effects. Try to get the results as fast as possible, but without compromising our other values and\nways we communicate\n, so the compounding of results can begin and we can focus on the next improvement.\nOperate with a bias for action\nIts important that we keep our focus on action, and dont fall into the trap of analysis paralysis or sticking to a slow, quiet path without risk. Decisions should be thoughtful, but delivering fast results requires the fearless acceptance of occasionally making mistakes; our bias for action also allows us to course correct quickly. Try to get results as fast as possible, but without compromising our other values and ways of working\nDisagree, commit, and advocate\nWhen a decision is in place, we expect people to commit to executing it. Any past decisions and guidelines are open to questioning as long as you act in accordance with them until they are changed. This is\na common principle\n.\nEvery decision can be changed;\nour\nbest decision was one that changed an earlier one\n.\nIn a manager-report relationship, usually the report is the\nDirectly Responsible Individual\n(DRI).\nThe manager may disagree with the final decision, but they still commit to the decision of the DRI.\nIn a group setting, participants may disagree with a proposal but not articulate their views for one reason or another. Sometimes,\nmany or all individuals may disagree yet choose not to speak up\n, because no one believes they would get agreement from the group. As a result, everyone loses out on their feedback.\nDissent\nis expression of that disagreement. However, it can be difficult and even socially expensive.\nExpression of feedback is a way for everyone to grow and learn, and is\nbased on facts rather than opinions\n. Share your perspective, rather than agreeing simply to avoid conflict or to go along with everyone else.\nWhen you want to reopen the conversation on something, show that your argument is informed by previous conversations and\nassume the decision was made with the best intent\n.\nYou have to achieve results on every decision while it stands, even when you are trying to have it changed.\nYou should communicate with the\nDRI\nwho can change the decision instead of someone who cant.\nEscalate to unblock\nIf there is a disagreement and you cant move forward because of it, agree to escalate and escalate to one or both of your managers. Early escalation, delivered with context of the challenge, enables managers to function as an unblocker.\nResults Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate results when we do what we promised to each other, customers, users, and investors.\nGitLab Job Grade\nDemonstrates Results Competency by...\nKnowledge Assessment\n5\nDevelops the skills needed to commit and execute on agreed actions.\nKnowledge Assessment for Individual Contributors\n6\nApplies commitment to results and demonstrates ability to execute on agreed actions.\n7\nModels a sense of urgency and commitment to deliver results.\n8\nCoaches team members to collaborate and work iteratively towards impact with the focus on the outcome and not activity worked.\nKnowledge Assessment for People Leaders\n9\nFosters a culture of ownership of personal performance.\n10\nDrives efficient execution of results ensuring collaboration between team members.\n11\nDevelops quarterly OKR's ensuring the performance and results of one or more teams.\n12\nLeads the achievement of results while driving the continued alignment to our values of collaboration, efficiency, diversity, iteration and transparency.\nEVP/CXO\nLeads the achievement of results while driving the continued alignment to our values of collaboration, efficiency, diversity, iteration and transparency.\n Efficiency\nAt GitLab, efficiency means producing\nresults\nwithout wasting materials, time, or energy. We optimize solutions globally for the broader GitLab community over one person or a small group. Focus on efficiency should be global in nature, not just local to a given function. Global efficiency could include efficiency with customers, candidates, and contributors as well. It is easy to prioritize consistency over efficiency because consistency is often more efficient initially and makes managing processes more efficient. We should slow down when optimizing for consistency. Taking a company-wide lens when evaluating changes will help ensure that new processes will improve efficiency for GitLab as a whole and be the best decision for the company as a whole.\nWhen we work internally with other team members, we leverage GitLabs unique working practices and operating principles to achieve top efficiency. We do not expect people outside of GitLab to conform to GitLabs ways of working, and we will make accommodations to work effectively with them. For example, we may collaborate heavily in-person and not default to async communications.\nOnly Healthy Constraints\nMost companies regress to the mean and slow down over time. While some changes are required as a company grows and matures, not all change is inevitable or should be allowed to passively happen. As GitLab grows, we are conscious of how we operate and how it enables our ability to continue to operate with the agility of a\nstartup\n. We try to limit ourselves to\nhealthy constraints\n.\nWrite things down\nWe document everything: in the handbook, in meeting notes, in issues.\nWe do that because \nthe faintest pencil is better than the sharpest memory\n.\nIt is far more efficient to read a document at your convenience than to have to ask and explain. Having something in version control also lets everyone contribute suggestions to improve it.\nBoring solutions\nUse the simplest and most boring solution for a problem, and remember that\nboring\nshould\nnot be conflated with bad or technical debt.\nThe speed of innovation for our organization and product is constrained by the total complexity we have added so far, so every little reduction in complexity helps.\nDont pick an interesting technology just to make your work more fun;\nusing established, popular tech will ensure a more stable and more familiar experience for you and other contributors.\nMake a conscious effort to\nrecognize\nthe constraints of others within the team.\nFor example, sales is hard because you are dependent on another organization, and development is hard because you have to preserve the ability to quickly improve the product in the future.\nSelf-service and self-learning\nTeam members should first\nsearch for their own answers\nand, if an answer is not readily found or the answer is not clear, ask in public as we all should have a\nlow level of shame\n.\nWrite down any new information discovered\nand pay it forward so that those coming after will have better efficiency built on top of practicing collaboration, inclusion, and documenting the results.\nTeam members have more room to grow themselves when they are able to self-service and self-learn.\nEfficiency for the right group\nOptimize solutions globally for the broader GitLab community. As an example, it may be best to discard a renewal process that requires thousands of customers to each spend two hours in favor of one that only takes sixty seconds, even when it may make a monthly report less efficient internally! In a decision, ask yourself For whom does this need to be most efficient? Quite often, the answer may be your users, contributors, customers, or team members that are dependent upon your decision.\nBe respectful of others time\nConsider the time investment you are asking others to make with meetings and a permission process. Try to avoid meetings, and if one is necessary, try to make attendance optional for as many people as possible. Any meeting should have an agenda linked from the invite, and you should document the outcome. Instead of having people ask permission, trust their judgment and offer a consultation process if they have questions.\nSpend company money like its your own\nEvery dollar we spend will have to be earned back. Be as frugal with company money as you are with your own. In saying this, we ask team members to weigh the cost of purchases against the value that they will bring to the company.\nConsider the degree to which a purchase increases your ability to better accomplish your work and achieve business\nresults\nrelative to cost. Lowering overhead reduces the cost to operate the business and lets us shift spend toward other priority areas.\nWe have\nguidelines\naround this operating principle to help team members better understand our expensing process and expectations.\nFrugality\nAmazon states it best\nwith: Accomplish more with less. Constraints breed resourcefulness, self-sufficiency, and invention. There are no extra points for growing headcount, budget size, or fixed expense.\nShort verbal answers\nGive short answers to verbal questions so the other party has the opportunity to ask more or move on.\nKeep broadcasts short\nKeep one-to-many written communication short, as mentioned in\nthis HBR study\n: A majority say that what they read is frequently ineffective because its too long, poorly organized, unclear, filled with jargon, and imprecise.\nManagers of one\nWe want each team member to be\na manager of one\nwho doesnt need daily check-ins to achieve their goals. Team members are given the freedom to own projects and initiatives and are trusted to see them through to a successful end.\nWhen team members are managers of one they can have an increased work/life balance, because they are more empowered to make decisions around how they allocate their time throughout each day.\nFreedom and responsibility over rigidity\nWhen possible, we give people the responsibility to make a decision and hold them accountable for that, instead of imposing rules and approval processes. You should have clear objectives and the freedom to work on them as you see fit. Freedom and responsibility are more efficient than rigidly following a process,\nor creating interdependencies\n, because they enable faster decision velocity and higher rates of\niteration\n.\nWhen team members have freedom and responsibility over rigidity, they have more room to help others.\nAccept mistakes\nNot every problem should lead to a new process to prevent them. Additional processes make all actions more inefficient; a mistake only affects one. Once you have accepted the mistake, learn from it. When team members are free to accept mistakes, they can take more calculated risks.\nMove fast by shipping the minimal valuable change\nWe value constant improvement by iterating quickly, month after month. If a task is not the\nsmallest viable and valuable thing\n, cut the scope.\nEmbrace change\nAdoption of features, user requirements, and the competitive landscape change frequently and rapidly. The most successful companies adapt their roadmap and their organization quickly to keep pace. One of the things that makes this challenging is the impact on our team. People may need to change teams, subject matter, or even who manages them. This can rightly feel disruptive. If we coach ourselves to embrace the positive aspects of change, such as increased opportunity and new things to learn, we can move faster as a company and increase our odds of success. It is important to\nhold management accountable for being deliberate\n.\nEfficiency Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate efficiency when we work on the right things, not doing more than needed, and not duplicating work.\nGitLab Job Grade\nDemonstrates Efficiency Competency by...\nKnowledge Assessment\n5\nDevelops an understanding of being a manager of 1 by taking responsibility for your own tasks and delivering on commitments. Brings up ideas for process improvements to 1:1s. Learns to write everything down as it is far more efficient to read a document at your convenience than to have to ask and explain.\nKnowledge Assessment for Individual Contributors\n6\nDevelops a deeper understanding of efficiency and actively identifies process inefficiencies within the team. Seeks out ways to be more effective in their role, while also starting to mentor others in ways to work efficiently.\n7\nModels a culture of efficiency within the team where people make good, timely decisions using available data and assessing multiple alternatives. Models using boring solutions for increasing the speed of innovation for our organization and product.\n8\nTakes ownership of own team process inefficiencies, implements cross team efforts in ensuring things are running smoothly. Implements a way of working in the team where team members first search for their own answers and, if an answer is not readily found or the answer is not clear, ask in public as we all should have a low level of shame.\nKnowledge Assessment for People Leaders\n9\nTakes ownership of group level process inefficiencies and guides cross sub-departments in ensuring things are running smoothly. Fosters a culture in the sub-departments where you respect others' time and promote self-service and self-learning.\n10\nDrives the framework of frugality on a department level and owns departments efforts in ensuring things are running smoothly. Drives efficient resolution of highly complex or unusual business problems that impact the department / team. Holds their managers and peers accountable for upholding this value.\n11\nDevelops the framework and strategy of frugality cross division resulting in efforts ensuring things are running smoothly. Develops leaders to action on division/department/team inefficiencies. Hold their management teams accountable for upholding this value.\n12\nLeads with efficiency across the company. Ensures efficient resource allocation decisions across the company. Leads across company strategy and policy improvements that move the business towards more efficiency. They hold their senior management and the e-group accountable for upholding this value.\nEVP/CXO\nChampions GitLab's strategy for efficiency internally and externally. Constantly looking for efficiency improvements cross company and holding other e-group members accountable for upholding efficiency too. They are comfortable leading through frugality and accepting of mistakes.\n Diversity, Inclusion & Belonging\nDiversity, inclusion and belonging are fundamental to the success of GitLab. We aim to make a significant impact in our efforts to foster an environment where everyone can thrive. We are designing a multidimensional approach to ensure that GitLab is a place where people from every background and circumstance feel like they belong and can contribute. We actively chose to build a culture that is\ninclusive\nand supports all team members equally in the process of achieving their professional goals. We work to make everyone feel welcome and to increase the participation of underrepresented groups in our community and company.\nBias towards asynchronous communication\nTake initiative to operate\nasynchronously\nwhenever possible. This shows care and consideration for those who may not be in the same time zone, are traveling outside of their usual time zone, or are\nstructuring their day\naround pressing commitments at home or in their community.\nThis is demonstrated by communicating recordings of\nmeetings\n, using GitLab Issues and Merge Requests rather than texts, calls, or Slack messages, and being sensitive to local holidays and vacation statuses. Encourage others to default to\ndocumentation\nrather than pressuring others to be online outside of their working hours.\nEmbracing uncomfortable ideas and conversations\nPart of embracing diversity is a willingness to embrace often uncomfortable conversations and situations. This concept is also at the core of inclusion and helping to eliminate the problems that are faced by certain GitLab team members who may not be in the majority.\nWe believe that being willing to embrace discomfort is the path forward to a safe, balanced and inclusive work place for all. Challenge yourself, challenge your own pre-set notions and ideas about different cultures or things you dont understand. When we are willing to embrace being uncomfortable, we can focus on actually fixing the issues at hand rather than simply appearing to care.\nUnderstanding the impact of microaggressions\nMicroaggressions are much more than merely rude or insensitive comments. They can wear people down by slowly chipping away their sense of belonging/safety/inclusion over time. What is a microaggression?\nThe everyday slights, indignities, put downs and insults that people of color, women, LGBT populations or those who are marginalized experiences in their day-to-day interactions with people. - Derald W. Sue\nAt GitLab we believe that everyone is entitled to a safe working space where they can express who they are and participate in conversations without worry of being spoken to in a harmful way, given that we want to encourage everyone to be mindful of what is a microaggression and be mindful of their potential impact.\nSeek diverse perspectives\nWe believe that team members seeking feedback from a diverse group of team members, inside and outside of their group or function, leads to better decisions and a greater sense of team member belonging. For more guidance on how we define Diversity, please refer to\nGitLabs definition of Diversity, Inclusion & Belonging\n. Feedback from a more heterogenous group often leads to better business outcomes as we incorporate diverse perspectives and uncover unconscious bias.\nAn example of this operating principle in action showcases the value of actively seeking diverse perspectives. The term Brag Document was used to describe when individuals documented their accomplishments. Documenting accomplishments is critical to team member development. However, team members had the\npsychological safety\nto raise the question of whether or not the title of the document made some feel uncomfortable. In an effort to seek a\ndiverse perspective\n, a survey was conducted in one of the\nTeam Member and Advocacy Resource Group (TMRG)\nchannels. The poll results showed that 100% of those polled preferred a different title and the title was changed.\nMake family feel welcome\nOne of the unique elements to an\nall-remote culture\nis the ability to visit a persons home while collaborating. If the tenor of the meeting allows, feel welcome to invite your family members or pets to drop by and greet your colleagues. Be mindful of language and use of profanity to encourage a family-friendly environment.\nShift working hours for a cause\nCaregiving, outreach programs, and community service do not conveniently wait for regular business hours to conclude. If theres a cause or community effort taking place, feel welcome to work with your manager and shift your working hours to be available during a period where youll have the greatest impact for good. For colleagues supporting others during these causes, document everything and strive to post recordings so its easy for them to catch up.\nBe a mentor\nPeople feel more included when theyre supported. To encourage this, and to support diversified learning across departments, consider GitLabs\nInternship for Learning\nprogram.\nCulture fit is a bad excuse\nWe dont hire based on culture or select candidates because wed like to have a drink with them. We hire and reward team members based on our shared values as detailed on this page. We want a\nvalues fit\n, not a culture fit.\nWe want cultural diversity instead of cultural conformity. Said differently:\nculture add  culture fit\nor hire for culture contribution since our\nmission is that everyone can contribute\n.\nReligion and politics at work\nWe generally avoid discussing politics or religion in public forums because it is easy to alienate people that have a minority opinion. This doesnt mean we never discuss these topics. Because we value diversity, inclusion and belonging, and want all team members to feel welcome and contribute equally, we encourage free discussion of operational decisions that can move us toward being a more inclusive company.\nThere is sometimes a grey area where advocating for diversity and political activities may intersect. Team members should use discretion in grey area communications, because a culture of belonging requires us to be respectful of the broad spectrum of views within our work environment. What does this mean in practice? Please feel empowered to share information that highlights diversity, inclusion and belonging issues and how GitLab and GitLab team members can get involved. In line with our\nCode of Business Conduct and Ethics\n, avoid posting articles that reference specific political figures or parties.\nWhile it is acceptable for individuals to bring up politics and religion in social contexts such as coffee chats and real-life meetups with other coworkers (with the goal to understand and not judge), always be aware of potential sensitivities, exercise your best judgment, and make sure you stay within the boundaries of our\nCode of Business Conduct and Ethics\n.\nWere a global company where perspectives and local norms may differ from culture to culture. Diversity, inclusion and belonging is about broad inclusion at a worldwide level. If there is a question or concern, please reach out to\ndiversityinclusion@gitlab.com\nor\n#diversity_inclusion_and_belonging\n.\nQuirkiness\nUnexpected and unconventional things make life more interesting.\nCelebrate and encourage quirky gifts, habits, behavior, and points of view. Open source is a great way to interact with interesting people. We try to hire people who think work is a great way to express themselves.\nBuilding a safe community\nDo\nnot\nmake jokes or unfriendly remarks about\ncharacteristics of the people who make up GitLab and how they identify\n.\nEveryone has the right to feel safe when working for GitLab and/or as a part of the GitLab community.\nWe do not tolerate abuse,\nharassment\n, exclusion, discrimination, or retaliation by/of any community members, including our team members.\nYou can always\nrefuse\nto deal with people who treat you badly and get out of situations that make you feel uncomfortable.\nUnconscious bias\nWe recognize that unconscious bias is something that affects everyone and that the\neffect it has on us as humans and our company is large.\nWe are responsible for understanding our own implicit biases and helping others\nunderstand theirs. We are continuously\nworking on getting better at this topic\n.\nInclusive benefits\nWe list our\nParental Leave\npublicly so people dont have to ask during interviews.\nInclusive language & pronouns\nUse\ninclusive\nlanguage.\nFor example, prefer Hi everybody or Hi people to Hi guys, and they instead of he/she. While there are several good guides from folks like\nBuffer\n,\nAPA\nand\nThe Northern Ireland Civil Services\non using inclusive language, we dont keep an exhaustive list.\nWhen new possibly non-inclusive words arise, we prefer to be proactive and look for an alternative.\nIf your goal is to be inclusive, it is more effective to make a small adjustment in the vocabulary when some people have a problem with it, rather than making a decision to not change it because some people dont think it is a problem.\nAnd if you make a mistake (e.g. accidentally using the wrong pronoun or an outdated phrase), acknowledge it,\napologize gracefully and move on\n; there is no need to dwell on it, and you can work to avoid making that mistake in the future.\nPlease also visit our\nGender and Sexual-orientation Identity Definitions and FAQ\npage if you have questions around pronouns and other topics related to gender / sexual orientation.\nLearn how to pronounce other peoples names\nWe attach part of our identity to our names, and if it is mispronounced it can feel less inclusive.\nIf it happens repeatedly, you may be unintentionally sending a message to that person that you are not interested\nin learning how to pronounce their name correctly. This applies to everyone you are in contact with:\nteam members, customers, candidates for jobs, and anyone else.\nPeople whose name is repeatedly mispronounced might feel unimportant or self-conscious, and might not\nspeak up about it.\nOther negative behaviors include giving a person a nickname without their permission, or\nactively avoiding using their name in sync calls.\nIt might be challenging to pronounce names from a different language or culture than your\nown, but with some effort, name pronunciation can be learned by anyone. Some ways to achieve this are:\nAsk the person for help in a private space: Im sorry, I dont think I am pronouncing your name correctly. Can you help me with the correct pronunciation?\nUse the written and recorded pronunciation tools in Slack.\nUse online tools such as videos recorded on YouTube or\nNameShouts\n.\nPractice the pronunciation with a friend or team member who knows the correct pronunciation.\nAlways avoid making jokes or comments about how it is difficult to pronounce their name.\nUse of nicknames\nSome people might choose to use a nickname, for example: Bob instead of Robert.\nAs long as this is their choice this is perfectly acceptable.\nWe should avoid assigning a nickname to a person without their permission.\nSlack pronunciation features\nSlack has two features to help with this issue: the phonetic name pronunciation field and the ability to record your own name pronunciation audio clip. We encourage all team members to complete both of these. Update them by\nediting your profile\n.\nInclusive interviewing\nThis is documented on our page about\ninterviewing\n.\nInclusive meetings\nBe consciously inclusive in\nmeetings\nby giving everyone present an opportunity to talk and present their points of view. This can be especially important in a remote setting.\nWith internal meetings, consider using an agenda document for questions. For example, with GitLab\nAMAs\n, every meeting has a numbered list that GitLab team members can add questions to. During the meeting, questions are answered in turn and discussions noted in the same document. Sometimes, these documents can have so much traffic (during the meeting) such that only a limited number of people can edit the document. In these situations, those who have questions should post on zoom chat and those who can edit the document should help copy the question over to the document. In addition, those who can edit the document should also post in zoom chat to see if anyone has any questions that they could help add to the document so that meeting attendees are more empowered to contribute to the conversation.\nCustomers are not used to working in this way. To promote inclusion with customers: ask participants for their goals; make sure during demos that you pause for question; leave time for discussion.\nInclusive and fair policy to regions with fewer employees\nBeing globally distributed has the benefit that someone can cover for you when you are off work. However, population density is not balanced across timezones. Policies should remain fair to those in less dense regions.\nFor example, the Asia Pacific region covers more timezones but has fewer team members. If we use an algorithm to assign tasks to those in later timezones, all American tasks would fall on the fewer Asia Pacific employees. This can damage belonging and inclusivity and should be avoided.\nWhen planning an event, the organizer should cater for location density differences to maximize participation in all regions.\nSee Something, Say Something\nAs a globally-dispersed company, we have team members from many different backgrounds and cultures. That means it is important for each of us to use great judgment in being respectful and inclusive of our teammates. At the same time, we may sometimes not fully realize we have said or done something to offend someone. It is important that our teammates hold each other accountable and let them know if they have unintentionally or intentionally done something so they can learn and gain additional understanding of perspectives different from our own. It is also important that our teammates dont feel excluded or minimized by the words we use or the things we do. Thus, we all need to speak up when we see something that isnt respectful or inclusive.\nEmbracing Neurodiversity\nNeurodiversity\nrefers to variations in the human brain regarding learning, attention, sociability, mood, and other mental functions. There are various neurodevelopmental conditions, like autism, ADHD, dyslexia, dyscalculia, dyspraxia, cognitive impairment, schizophrenia, bipolarity, and other styles of neurodivergent functioning. While neurodivergent individuals often bring\nunique skills and abilities\nwhich can be harnessed for a\ncompetitive advantage\nin many fields (for example,\ncybersecurity\n), neurodivergent individuals are often discriminated against. Due to non-inclusive hiring practices, they sometimes have trouble making it through traditional hiring processes. Neurodiversity inclusion best practices benefit everyone, and at GitLab, everyone can contribute. The handbook, values, strategy, and interviewing processes must support the ability for everyone to thrive.\nAt GitLab we embrace Neurodiversity through adopting a variety of different work styles and communication styles, and we lean into\ntransparency\n, asynchronous as a default working style, and pre-filled meeting agendas. These best practices become even more important when embracing neurodiversity. Providing multiple ways to consume information (written / video / audio) allows everyone to contribute independent of their preferred comprehension style. It is important to ask team members specifically what their preferred communication method is in order to provide them information in a format that is easily consumable for them.\nRemember,\nbrains work differently\nand always\nassume positive intent\n, even if someone behaves in an unexpected way. While it may be an unexpected behavior to you, it may not be unexpected to the individual exhibiting the behavior. That is the beauty and value of diversity, embracing differences and becoming stronger and better as a result.\nWe also recommend that all team members review the\nReasonable Accommodation\nprocess. A Reasonable Accommodation for a team member could include noise-cancelling headphones, scheduling smaller group session zoom calls, providing very explicit and precise instructions and due-dates when given tasks, or providing a variety of supportive software tools.\nThe most important thing that managers can do is facilitate an environment in which all team members feel\npsychologically safe\nenough to make requests for\nwhat they need\nin order to do their job.\nFamily and friends first, work second\nLong-lasting relationships\nare the rocks of life\n, and come before work. As someone said in our\n#thanks channel\nafter helping a family member for five days after a hurricane: THANK YOU to GitLab for providing a culture where family first is truly meant. Use the hashtag:\n#FamilyAndFriends1st\nEquity not just equality\nEquity vs. Equality: Whats the Difference?\nWhile the terms equity and equality may sound similar, the implementation of one versus the other can lead to dramatically different outcomes for marginalized people.\nEquality means each individual or group of people is given the same resources or opportunities. Equity recognizes that each person has different circumstances and allocates the exact resources and opportunities needed to reach an equal outcome.\nDiversity, Inclusion & Belonging Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate diversity, inclusion and belongings when we foster an environment where everyone can thrive and ensuring that GitLab is a place where people from every background and circumstance feel like they belong and can contribute.\nIf you would like to improve your skills or expand your knowledge on topics relating to Diversity, Inclusion, & Belonging at GitLab, check out our resources:\nBeing an Ally\nBeing Inclusive\nRecognizing Bias\nGitLab Job Grade\nDemonstrates Diversity & Inclusion Competency by...\nDemonstrates DIB Behaviors by...\n(Should not be considered an exhaustive list)\nKnowledge Assessment\n4\nLearns to understand the impact of biases. Gathering more information about the skills needed to be accountable for their actions, apologizes and learn.\n5\nDevelops an understanding of the impact of biases; seeks to learn more about their own biases. Is accountable for their actions, apologizes and learns from their mistakes.\nDIB\ntraining and/or other company wide training to further education on DIB\nAttend DIB Initiatives Calls to stay informed and connected with ongoing efforts and discussions\nParticipate in a DIB Initiative: join\nTMRGs\nyou identify with, support other groups as an Ally, attend events, \"like\" slack posts and spread the word\nParticipate in a TMRG initiative\nMember of a working group related to a DIB initiative, e.g. participate in a\nMentorship\nprogram\nKnowledge Assessment for Individual Contributors\n6\nHas a growing understanding of the impact of biases; fosters a sense of inclusion and belonging on their team. Holds themselves and peers accountable for upholding this value by kindly pointing out when mistakes might be made. Encourages an inclusive team environment where differences are encouraged and everyone can contribute.\n7\nActively aware of how bias or exclusion might occur on a team and helps to facilitate a team environment where team members belong and feel safe. Models empathy with their interactions with customers and cross functional team members.\n8\nImplements best practices to limit bias on their team. They ensure blameless accountability is practiced throughout their team. Creates an environment where team members feel safe to share ideas and welcomes individual differences.\nDIB\ntraining and/or other company wide training to further education on DIB\nAttend DIB Initiatives Calls to stay informed and connected with ongoing efforts and discussions\nParticipate in a DIB Initiative: join\nTMRGs\nyou identify with, support other groups as an Ally, attend events, like posts and spread the word\nParticipate in a TMRG initiative\nMember of a working group related to a DIB initiative, e.g. participate in a\nMentorship\nprogram\nHiring Manager ensure a diverse candidate slate and interview panel\nActive participant and advocate for department DIB goals\nKnowledge Assessment for People Leaders\n9\nProactively finds ways of facilitating an inclusive team environment and assesses processes to protect against unconscious bias. They hold their team members accountable including cross functional stakeholders. Promotes individual differences across their team and other departments.\n10\nDrives diversity, inclusion and sense of belonging across their department. They hold their managers and peers accountable for upholding this value. They are actively involved in the execution of D&I strategies and encourage others to participate.\nBlack is Tech\n,\nGrace Hopper\n11\nEmbeds the value of Diversity & Inclusion across their division and finds opportunities to limit the impact of bias on decision making processes. Uses feedback and data to formulate a strategy on how to make improvements. They hold their management teams accountable for upholding the value.\n12\nLeads with the value of Diversity & Inclusion across the company and finds opportunities to limit the impact of bias on decision making processes. They sponsor internal initiatives to increase trust, psychological safety and inclusion. They hold their senior management and the e group accountable for upholding this value.\nDIB Team\n&\nLeadership DIB Council\nto establish an action plan for your departments & division\nServe as an\nTMRG\nexecutive sponsor\nEmbed DIB into All hands or in person events e.g.review organizations OKR as it relates to DIB progress, champion trainings related to further DIB knowledge, invite guest speakers to advocate\nEVP/CXO\nChampions the value of Diversity, Inclusion and Belonging into the company's strategy. They champion and sponsor internal and external D&I initiatives. They speak to the importance of this value in company-wide meetings. They hold their leaders and other e group members accountable for upholding this value. They continuously seek ways to increase trust, psychological safety and inclusion across the broader company.\nDIB Team\n&\nLeadership DIB Council\nto establish an action plan for your departments & division\nServe as a\nTMRG\nexecutive sponsor\nEmbed DIB into All hands or in person events e.g.review organizations OKR as it relates to DIB progress, champion trainings related to further DIB knowledge, invite guest speakers to advocate\n Iteration\nMerriam-Webster\ndefines iteration as the the action or a process of iterating or repeating: such as a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. At GitLab, we iterate to do the\nsmallest valuable thing to get fast feedback and efficiently reach a desired end goal\n. Feedback can be from internal users (dogfooding), a limited number of external users (through our\nearly access program\n), or through feedback from our broader user community. We validate each iteration and adjust, but not at the expense of the user experience that we deliver to our customers.\nWhen we iterate at GitLab, we break up the work that we know we need to do into smaller chunks to iterate toward a targeted end state:\nMerge in codebase\nDogfood\nHave some external users (early access program)\nEnsure global optimization (use standardized systems)\nPlan beyond the iteration\nIteration does not require us to ship features that are open to all users from day one. Feedback can come from internal users or a limited number of external users (early access program). Moving through the\nrelease process is not iteration\nthough. Iteration is also not a\nreplacement for having a plan\n. We expect you to know where you are going, but you can iterate to get there.\nAn iteration might be additive (adding something) or subtractive (removing something). If you make suggestions that can be excluded from the first iteration, turn them into a separate issue that you link.\nWhile you should have a clear vision of the desired outcome and how it addresses a customer pain point or improves the user experience, be efficient in your planning. Unless you identify important cross-functional interdependencies, focus detailed planning on the first step. It might feel you are moving too slowly; however, planning is critical in order to ensure you can move fast when implementing. Youre doing it right if you feel that you have shipped the minimal feature set in the first iteration. This value is the one people most underestimate when they join GitLab. The impact, both on your work process and on how much you achieve, is greater than anticipated. Frequently, the simplest version that provides value turns out to be the best one.\nMany people who join GitLab say they already practice iteration. But this is the value that is the hardest to understand and adopt. People are trained that if you dont deliver a perfect or polished thing, there will be a problem. If you do just one piece of something, you have to come back to it. Doing the whole thing seems more efficient, even though it isnt. If the complete picture is not clear, your work might not be perceived as you want it to be perceived. It seems better to make a comprehensive product. They see other GitLab team members being really effective with iteration but dont know how to make the transition, and its hard to shake the fear that constant iteration can lead to shipping lower-quality work or a worse product. In reality, it is possible to ship a minimally valuable product while continuing to adhere to the documented quality standards.\nThe way to resolve this is to write down only what value you can add with the time you have for this project right now. That might be 5 minutes or 2 hours. Think of what you can complete in that time that would improve the current situation. Iteration can be uncomfortable, even painful. If youre doing iteration correctly, it should be. Reverting work back to a previous state is positive, not negative. Were quickly getting feedback and learning from it. Making a small change prevented a bigger revert and made it easier to revert.\nHowever, if we take smaller steps and ship smaller, simpler features, we get feedback sooner. Instead of spending time working on the wrong feature or going in the wrong direction, we can ship the smallest product, receive fast feedback, and course correct. People might ask why something was not perfect. In that case, mention that it was an iteration, you spent only x amount of time on it, and that the next iteration will contain y and be ready on z.\nIteration enables\nresults\nand\nefficiency\n.\nIn the\nGitLab Unfiltered video\nembedded above, GitLab co-founder Sid Sijbrandij shares key operating principles to reinforce iteration in an organization.\nStart with a long-term vision\nIteration involves driving results in pursuit of a long-term vision. While the intermediate goals may change as we iterate, we are unlikely to be successful if we dont start with a vision of what we are working toward. Shipping that vision in iterations allows us to learn from customers using it and adjust the vision if needed. Iteration for the sake of iteration can lead to inefficiencies and not deliver desired results.\nIteration is no substitute for planning\nIteration without a plan can lead to inefficiencies and a subpar customer experience. Before iterating we need to plan. A plan should include:\nTime-bound objective: Where we want to be in a year\nUX: User experience we are working toward\nQuality: What quality is sufficient quality, inclusive of security\nSuccess metric: Usage we want at a specific time\nData schema: The data schema we need to measure progress towards project goals\nGTM plan: How we want to go to market\nEnablement: When wed plan to train and enable the support and field teams\nMarketing: When wed launch marketing (doesnt have to be at release)\nSecure by design: default to the most secure configuration\nThe release process is not iteration\nMoving through the release process is not iteration.\nThe release process can include:\nDogfooding\nEarly access\nIncremental release using\na feature flag\nDevelopment stage progression\n(such as experiment to beta)\nRelease\nAnnouncement\nWhile\ndevelopment stages\ncan be used to indicate release progress, is not itself iteration.\nIterate toward global maximum\nIf we are not aware of interdependencies beyond our team, and we are not collaborating with others across the organization, we risk deliverables that settle into a local maximum of quality, richness, and efficiency. This localization is largely defined by team structure and organizational boundaries. While an iteration can take place within a single team, that team is responsible for identifying inter-dependencies and proactively communicating and aligning with other teams working on related projects. This helps ensure that iterations are not half-baked and align with work being done across the entire organization.\nDont wait\nDont wait on the small things. When you have something of value like a potential blog post or a small fix, implement it straight away. Right now, everything is fresh in your head and you have the motivation. Inspiration is perishable. Dont wait until you have a better version. Dont wait until you record a better video. Dont wait for an event (like\nGitLab Summit\n). Inventory that isnt released is a liability since it has to be managed, becomes outdated, and you miss out on the feedback you would have received had you implemented it straight away. When we dont wait we signal intent to others that we have a purpose to resolve something.\nNote\n: Dont wait should not be used as a justification for not iterating toward the global maximum or at expense of the plan. If there are interdependencies to be considered or the iteration is customer facing, slow down and ensure that we are considering what is best for GitLab and our customers.\nSet a due date\nWe always try to set a due date. If needed, we cut scope.\nIf we have something planned for a specific date, we make that date. For example we\nshipped over 133 monthly releases\n. But every one of them doesnt contain all the features we planned.\nIf we planned an announcement for a certain date, we might announce less or indicate what is still uncertain.\nBut we set a due date because having something out there builds trust and gives us better feedback.\nCleanup over sign-off\nAs discussed in\nSids interview on iteration\n, waiting for approval can slow things down. We can prevent this with automation (such as tests of database migration performance) or clean-up after the fact (refactor a Pajamas if something was added that isnt coherent), but we try to ensure that people dont need to wait for sign-off. As iteration does not require us to ship to all users on day one, we can clean up after an internal or beta release to mitigate the negative impact to all customers.\nStart off by impacting the fewest users possible\nIteration does not mean being open to all users from day one. If you do a gradual rollout of your change, prefer:\nFew users over many users\nInternal users (dogfooding) over external users\nEnvironments with fast feedback (SaaS) over slow feedback (self-managed)\nReduce cycle time\nShort iterations reduce\nour cycle time\n. Merging frequently also prevents merge conflicts.\nWork as part of the community\nSmall iterations make it easier to work with the wider community. Their work looks more like our work, and our work is also quicker to receive feedback.\nMinimal Valuable Change (MVC)\nWe encourage MVCs to be as small as possible. Always look to make the quickest change possible to improve the users outcome. If you validate that the change adds more value than what is there now, then do it. This may be additive (adding something) or subtractive (removing something). No need to wait for something more robust. More information is in the\nproduct handbook\n, but this applies to everything we do in all functions. Specifically for product MVCs, there is additional responsibility to validate with customers that were adding useful functionality without obvious bugs or usability issues.\nMake a proposal\nIf you need to decide something as a team, make a concrete proposal instead of calling a meeting to get everyones input. Having a proposal will be a much more effective use of everyones time. Every meeting should be a review of a proposal. We should be\nbrainwriting on our own instead of brainstorming out loud\n. State the underlying problem so that people have enough context to propose reasonable alternatives. The people that receive the proposal should not feel left out and the person making it should not feel bad if a completely different proposal is implemented. Dont let your desire to be involved early or to see your solution implemented stand in the way of getting to the best outcome. If you dont have a proposal, dont let that stop you from highlighting a problem, but please state that you couldnt think of a good solution and list any solutions you considered.\nBy making a proposal you also provide better visibility into the work and the context surrounding it.\nIn this\nGitLab Unfiltered video\n, GitLab co-founder Sid Sijbrandij converses about iteration in engineering, leveraging proposals to break work into smaller components.\nEverything is in draft\nAt GitLab, we rarely mark any content or proposals as drafts. Everything is always in draft and subject to change. When everything is in draft, contributions from team members as well as the wider community are welcomed. By having everything in draft and\nassuming others have low context\n, confusion can be reduced as people have shared access to information.\nUnder construction\nAs we continue to expand the number of users we have, they will continue to expect stability and reliability. We must optimize for the long term without sacrificing stability along the way. This means that users may be inconvenienced in the short term, but current and future users will enjoy a better product in the end.\nEducating users on the longer-term plan helps create a shared understanding of how a small change will incrementally grow into something more. For example, we could share how a dropdown will evolve into a much more nuanced solution in the future. We can take the following steps to articulate our plan:\nOpen a feedback issue that provides context about the initial MVC (\nexample\n)\nEnsure the direction page articulates a long-term plan (\nexample\n)\nAnnounce the MVC in a release post, link to the feedback issue, and link to the direction page (\nexample\n)\nLow level of shame when dogfooding\nIn many organizations, you take a risk when you put forth any work thats not perfect, work where you havent spent endless cycles planning for contingencies or counterpoints. Because of this, youre incentivized to invest a lot of time and effort into preparing for What if? scenarios before any work is presented, even if the release is not customer facing and there is a low level of risk in imperfection.\nThe downside to that is clear when we are dogfooding: If you do eventually put forth the work, but it needed to be course-corrected a long time ago, youve squandered time that you could have spent improving it through iteration.\nHaving a low level of shame when dogfooding or working internally requires you to combat a natural inclination to conceal work until its perfect, and instead celebrate the small changes.\nCultural lens\nCultural differences can bring unique challenges and expectations to iteration. For some, expressions like it doesnt have to be perfect... can challenge cultural norms. We encourage you to bring your authentic self and seek shared understanding when iterating.\nGiving feedback\nand ensuring\npsychological safety\nare necessary for every iterative attempt.\nFocus on improvement\nWe believe great companies sound negative because they focus on what they can improve, not only on what is working well.\nIn every conversation, inside and outside the company, we should ask a question: What do you think we can improve?\nThis doesnt mean we dont recognize our successes; for example, see our\nSay Thanks\nvalue.\nWe are positive about the future of the company. We are\nS\nhort\nTe\nrm\nC\nritical\nA\nnd\nL\nong\nT\nerm\nO\nptimistic (\nSTeCALTO\n, for short).\nBe deliberate about scale\nFirst, optimize for speed and results (and be deliberate about how your change affects other processes/functionality); when it is a success, figure out how to scale it. Great examples are in\nthis article by Paul Graham\n.\nResist bundling\nResist the urge to bundle a series of smaller iterations so team members dont see a project as their last (or best) opportunity to contribute. Its tempting to\ncreate encompassing projects or initiatives\nthat roll many smaller projects up. This incarnation of scope creep drives up cost, encourages fewer risks, and incentivizes perfection (via longer cycle times) over progress. When we resist bundling, we reduce the risk that work will be canceled due to scale or scope. By resisting bundling we also reduce the coordination needed because fewer people or teams may be involved.\nMake two-way door decisions\nMost decisions are easy to reverse. In these cases, the\nDirectly Responsible Individual\nshould go ahead and make them without approval. Only when you cant reverse them should there be a more thorough discussion. By\nembracing iteration\nand making two-way door decisions, we are more efficient and achieve more results.\nChanging proposals isnt iteration\nChanging something without shipping it is a revision, not iteration. Only when the change is rolled out to users, whether\ninternal users or a limited customer group\n, can you learn from feedback. When youre changing a proposal based on different opinions, youre frequently wasting time; it would be better to roll out a small change quickly and get real world feedback. Never call a revision an iteration because it is almost the opposite.\nEmbracing Iteration\nIn order to embrace iteration, we should have the attitude that we are trying to achieve as much as possible in a small amount of time; its where we land at the end state of an iteration that counts. The benefit of iteration is to get fast feedback from users. Focus on sharing context at the\nend of the first iteration\nrather than a\nhypothetical future state\nthat requires multiple iterations. By embracing iteration we can increase creativity in incremental components.\nMake small merge requests\nWhen you are submitting a merge request for a code change, or a process change in\nthe handbook, keep it as small as possible. If you are adding a new page to the\nhandbook, create the new page with a small amount of initial content, get it merged\nquickly via\nHandbook Usage guidelines\n, and then add additional sections iteratively with subsequent merge requests.\nSimilarly, when adding features to GitLab, consider ways to\nreduce the scope\nof the feature before creating the merge request to ensure your merge request is as small as possible.\nAlways iterate deliberately\nRapid iteration can get in the way of\nresults\nif its not thought out; for example, when adjusting our marketing messaging (where consistency is key), product categories (where weve set development plans),\norganizational structure\nor\nproduct scope alignment\n(where real human stresses and team stability are involved), sales methodologies (where weve trained our teams) and this values page (where\nwe use the values to guide all GitLab team members). In those instances, we add additional review to the approval\nprocess; not to prohibit, but to be more deliberate in our iteration. The change process is documented in the\nGitLab Handbook Usage\npage and takes place via merge request approvals.\n12 things that are not iteration\nIteration is often counterintuitive and difficult to do. To clarify what an iteration is, it helps to see examples of what is not an iteration. Below are 12 examples of things weve seen mistaken as iteration, but dont meet our definition of iteration.\nReducing quality, or lowering goal posts\nAvoiding or reducing documentation\nCompromising on security\nDelivering something thats not the recommended path or on by default\nShipping something of no value\nAn excuse to focus on unimportant items\nMoving through the release process\nRevisions you dont ship or publish\nAn excuse to impose unrealistically tight timelines\nAn excuse to avoid planning\nImposing long hours\nExpecting others to fix your work\nIn this\nGitLab Unfiltered video\n, GitLab co-founder Sid Sijbrandij elaborates on each of these 12 things that are not iteration.\nIteration Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate iteration when we do the smallest viable and valuable thing, get it out quickly for feedback, and make changes based that feedback.\nGitLab Job Grade\nDemonstrates Iteration Competency by...\nKnowledge Assessment\n5\nDevelops own knowledge by trying and failing. When asking questions isn't content with silence or unhelpful/incomplete responses, seeks out primary sources.\nKnowledge Assessment for Individual Contributors\n6\nActively looks for opportunities to iterate and contribute to boring solutions. Balances short term gains and long term benefit with team's help. Ships things that aren't 100% knowing that you'll be able to improve them in the next revision. Asks questions with abandon. Publicly shares failures if you'll help colleagues learn.\n7\nIndependently balances short term gains and long term benefit. Identifies opportunities to deliver projects in an iterative way.\n8\nIs able to take long term goals and turn them into small actionable steps that can be implemented in an iterative way. Identifies and prevents decisions that are not \"two-way door decisions\". Ships. All the time. Sounds like a broken record in discussions with more junior members of the team; always asking if we can make something smaller.\nKnowledge Assessment for People Leaders\n9\nIn addition to upholding the requirements of a Staff/Manager level, a Principal/Sr. Manager practices and fosters the value of iteration to team members. They hold their team members accountable for iteration and boring solutions.\n10\nIn addition to upholding the requirements of a Principal/Sr. Manager, a Distinguished/Director proactively finds ways to drive the value of iteration and boring solutions.\n11\nIn addition to upholding the requirements of a Distinguished/Director, a Sr. Distinguished/Sr. Director embeds the value of Iteration across the department and division. They use their cognitive and analytical abilities to anticipate and adapt to unpredictabilities in regard to strategic risk in a way that benefits all involved.\n12\nIn addition to upholding the requirements of a Sr. Distinguished/Sr. Director, a Fellow/VP leads the way for the value of Iteration across the division and cross functional teams. They confidently lead their teams through change and proactively take risks based on values and the strategic vision.\nEVP/CXO\nIn addition to upholding the requirements of a Fellow/VP, the EVP champions the value of Iteration across GitLab. They are comfortable leading through discomfort and the unease associated with change and innovation.\n Transparency\nBe open about as many things as possible. By making information public, we can reduce the threshold to contribution and make collaboration easier. Use public issue trackers, projects, and repositories when possible. Transparency is not communication. Just because something exists in the handbook or elsewhere doesnt mean it cant be communicated again or in a more robust fashion to the people who need to understand or acknowledge it. On a personal level, be direct when sharing information, and admit when youve made a mistake or were wrong. When something goes wrong, it is a great opportunity to say Whats the\nkaizen\nmoment here? and find a better way without hurt feelings.\nEven as a\npublic company\n, we know that our value of transparency will be key to our success. This value can be hard to follow at times. You might ask yourself: what should be shared, how much to share, whether or not to speak up but definitely take the time to always opt for maximum transparency by adhering to the operating principles below. Often, company values get diluted as they grow, most likely because they do not write anything down. But we will make sure our values scale with the company. As a\npublic company\n, we declare everyone in the company as an insider, which allows us to remain transparent internally about our numbers, etc. Everything else that can be transparent will continue to be so.\nWhen there are exceptions, material that is\nnot public by default is documented\n.\nPublic by default\nEverything at GitLab is public by default.\nThe public process does two things: allows others to benefit from the conversation and acts as a filter. Since there is only a limited amount of time, we prioritize conversations that a wider audience can benefit from.\nOne example of transparency at GitLab is the\npublic repository of this website\nthat also contains this\ncompany handbook\n. Others include the\nGitLab CE\nand\nGitLab EE\nissue trackers, as well as\nmarketing\nand\ninfrastructure\n. Transparency creates awareness for GitLab, allows us to recruit people that care about our values, gets us more and faster feedback from people outside the company, and makes it easier to collaborate with them. It is also about sharing great software, documentation, examples, lessons,\nand processes with the\nwhole community\nand the world in the spirit of open source, which we believe creates more value than it captures.\nIn line with our value of transparency and being public by default, all GitLab team member\nprofiles\nshould be public. Public profiles also enable broader collaboration and efficiencies between teams. To do so, please make sure that the checkbox under the\nPrivate profile\noption is unchecked\nin your profile settings\n. If you do not feel comfortable with your full name or location on your profile, please change it to what feels appropriate to you as these are displayed even on private profiles.\nBecause we are public by default and have the\nSAFE framework\nwe dont need to make cases for why things should be transparent. If something is unSAFE and needs to remain\nnot public\nit can be.\nNot public\nWe make information public by default because\ntransparency is one of our values\n.\nHowever it is\nmost important to focus on results\n.\nTherefore, a category of information is\npublic\nunless there is a reason for it not to be. If something is not public, there should be a reference in the handbook that states a confidential decision was taken with a link to our Not Public guidelines, unless GitLab Legal and Corporate Affairs believes it carries undue risk. We document what is\nnot public by default\non our communication page.\nIf you believe something shouldnt be public that currently is (or vice versa), then\nmake a merge request\nto the relevant page(s) suggesting the change so that you can collaborate with others and discuss with the\nDRI\n. When content contains information which is\nnot public\nit is recommended to remove the specific sections which are not public, put them on their own page in the internal handbook, and then link out to that with a not public/internal only note. Always share publicly what we can.\nWhen information is not public, it may also be treated as limited access, only shared with certain GitLab roles, teams, or team members due to privacy considerations, contractual obligation, or other reasons that the author or DRI can specify.\nCertain kinds of information default to limited access, including details about team members or customers who did not give permission to share the information.\nMost companies become non-transparent over time because they dont accept any\nmistakes. Instead, we should always err on the side of transparency when there\nis a choice to be made between caution or inaction, and transparency. If we make\na mistake, we now know what the limits of transparency are for the company and\nwe should\ndocument this\n.\nThe only exception to this rule would be in the case when there are legal concerns.\nBecause some information is\nnot public\nthe public information can be lacking some context. We should be cognizant of that.\nDirectness\nBeing direct is about being transparent with each other. We try to channel our inner\nBen Horowitz\nby being\nboth straightforward and kind\n.\nFeedback is always about your work and not your person. That doesnt mean it will be easy to give or receive it.\nArticulate when you change your mind\nIf you state one thing, and then change course and support a different direction, point, or outcome, articulate this. It is OK to have your position changed by new data. Articulating that an\nearlier\nstance is not your\ncurrent\nstance provides clarity to others and encourages data-driven decision making.\nSurface issues constructively\nBe transparent to the right people (up) at the right time (when still actionable). If you make a mistake, dont worry; correct it and\nproactively\nlet the affected party, your team, and the CEO know what happened, how you corrected it, and howif neededyou changed the process to prevent future mistakes.\nTransparency is most valuable if you continue to do it when there are costs\nWe practice transparency even when hiding the facts would be easier. For example, many companies do not give you the real reason why they declined your application because it increases the chance of legal action. We want to only reject people for the right reasons and we want to give them the opportunity to grow by getting this feedback. Therefore, well accept the increased risk of holding ourselves to a high standard of making decisions and do the right thing by telling them what we thought. Other examples are being transparent about\nsecurity incidents\nand participating in and contributing to Live Broadcasts.\nTransparency has costs (distraction, mis-interpretation, etc.) but also great benefits (productivity, hiring, retention, brand awareness, etc). We should carefully weigh the tradeoff between costs and benefits, to prevent a knee-jerk reaction to reduce transparency when it has costs.\nSingle Source of Truth\nBy having most company communications and work artifacts be public to the Internet, we have one single source of truth for all GitLab team members, users, customers, and other community members. We dont need separate artifacts with different permissions for different people.\nFindability\nOur transparency value means more than just making information accessible to all. In order to\nimprove performance\nits important that we not only ensure information is accessible, but also ensure it flows to the correct places and is\nfindable\nby those who need it. Focusing on information flow will ensure you, for example, utilize\nmulti-modal communication\n, or that you keep your\nstakeholders informed of changes\nby posting links to MRs in Slack.\nSay why, not just what\nTransparent changes have the reasons for the change laid out clearly along with the change itself. This leads to fewer questions later on because people already have some understanding. A change with no public explanation can lead to a lot of extra rounds of questioning, which is less efficient.\nThis also helps with institutional memory: a year from now when you want to know why a decision was made, or not, the issue or MR that has the decision also shares why the decision was made.\nThis is related to\nChestertons fence\n- its much easier to suggest removing or changing something if you know why it exists in the first place.\nIf you use generalized terms such as industry standard or best practices, be sure to give context, as without context they can be seen as potentially vague or opaque.\nSimilarly, merely stating a single value isnt a great explanation for why we are making a particular decision. Many things could be considered iteration or efficiency that dont match our definition of those values. Try to link to an operating principle of the value or provide more context, instead of just saying a single values name.\nSaying why and not just what enables discussion around topics that may impact more than one value; for instance, when weighing the\nefficiency of boring solutions\nwith the focus on\ncustomer results\n. When decisions align with all of our values, they are easy to discuss and decide. When there are multiple values involved, using our\nvalues hierarchy\nand\ndirectly\ndiscussing the tradeoffs is easier with more context.\nArticulating why also helps people understand how something changed when you\narticulate that you changed your mind\n.\nSaying why does not mean justifying a decision against all other suggestions.\nThe\nDRI\nis responsible for their decision.\nThe DRI is not responsible for convincing other people, but they should be able to articulate their reasoning for the change.\nWhen a GitLab Team Member comes across an ask or material (MR, handbook, etc.) that does not provide a why with sufficient context, the Team Member is responsible for getting the why and, if needed, working with the DRI to ensure that it is adequately documented and communicated to give context to other team members. In the absence of a why, team members may speculate the why. This is something that can lead to disruption and inefficiency.\nReproducibility\nEnable everybody involved to come to the same conclusion as you. This not only involves\nreasoning\n, but also providing, for example: raw data and not just plots; scripts to automate tasks and not just the work they have done; and documenting steps while analyzing a problem. Do your best to make the line of thinking transparent to others, even\nif they may disagree\n.\nTransparency Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate transparency when we are open with as many things as possible reducing the threshold to contribution and make collaboration easier.\nGitLab Job Grade\nDemonstrates Transparency Competency by...\nKnowledge Assessment\n5\nUses public issue trackers, projects, and repositories when possible. Looks for opportunities to publicly share the things that they are working on.\nKnowledge Assessment for Individual Contributors\n6\nProvides context and background on projects and issues so that those with no prior knowledge are able to contribute to the discussion. They welcome feedback and new ideas as they know that will lead to a better solution.\n7\nContinually surfaces improvements across their functional area of expertise. They share feedback with others and understand how to disagree and commit to solutions. They model what it means to be as open as possible. They encourage conversation in public channels.\n8\nImplements open processes across their team. They also track team issues and projects openly so their team members are aware of everything that is happening on a team at a given time. They leverage feedback to drive the best possible outcomes with the information they have available. They also share feedback with their team and their peers in a timely, kind manner so their position on a given topic is known.\nKnowledge Assessment for People Leaders\n9\nFosters and coaches openness across cross functional departments. They lead cross functional issues, projects and ideas inviting feedback to generate the best possible solution. They hold their teams accountable to continue to find opportunities to share things openly. They give feedback to their team members, peers and managers in a timely, kind manner so their position on a topic is known.\n10\nDrives their departmental strategy with openness as a key value. They hold their management team accountable to working openly and pushes them to make everything transparent even when it might be difficult to do so. They coach managers on the value that additional feedback can bring to the end solution.\n11\nDevelops leaders that work openly and continue to provide timely, kind feedback across their division. They develop leaders that drive their teams with openness as a foundational part of the way that they operate.\n12\nLeads the company by being open in all things. They are open with things that might traditionally not be shared broadly. They communicate directly and provide feedback in a timely manner to initiatives happening within their department and across the company. They hold the e group and other leaders accountable for upholding this value.\nEVP/CXO\nChampions transparency both internally, across the company and externally. They participate both internally and externally in events and share the value that being open can provide to increasing trust with team members and others that interact with our product. They provide timely, kind feedback with initiatives happening internally and externally. They hold the e group and other leaders accountable for upholding this value.\nWhy have values\nOur values provide guidelines on how to behave and are written to be actionable.\nThey help us describe the type of behavior that we expect from GitLab team members.\nThey help us to know how to behave in the organization and what to expect from others.\nValues provide a framework for distributed decision making, detailed in GitLabs\nTeamOps\nmanagement philosophy. They allow individuals to determine what to do without asking their manager and they allow teams to make consistent decisions. When teams across the organization reference the same values in their decision making, there is consistency in how decisions are made. This ensures that\nour culture\nremains driven by our values.\nLastly, values create a\nconscious culture\nthat is designed to help you prosper and experience exceptional personal growth through work.\nFive dysfunctions\nOur values also help us to prevent the\nfive dysfunctions\n:\nFear of conflict\nSeeking artificial harmony over constructive passionate debate =\nprevented by transparency, specifically\ndirectness\nand collaboration, specifically\nshort toes\nAbsence of trust\nUnwilling to be vulnerable within the group =\nprevented by collaboration, specifically\nkindness\nAvoidance of accountability\nDucking the responsibility to call peers on counterproductive behavior which sets low standards =\nprevented by results, iteration, and\ntransparency\nInattention to results\nFocusing on personal success, status, and ego before team success =\nprevented by\nresults\nLack of commitment\nFeigning buy-in for group decisions creates ambiguity throughout the organization =\nprevented by transparency, specifically\ndirectness\nSome dysfunctions are not addressed directly by our values; for example, trust is not one of our values.\nSimilar to happiness, trust is something that is an outcome, not something you can strive for directly.\nWe hope that the way we work and our values will instill trust, instead of mandating it from people; trust is earned, not given.\nOperating principles\nOperating principles are behaviors that empower GitLab team members to definitively live out a given value.\nThey clarify what a given core value means and looks like\nat GitLab\n.\nUnderstanding this distinction is critical to thriving at GitLab,\nparticularly for\nnewer team members\nwho may be familiar with a prior organizations interpretation of iteration or collaboration (as examples).\nProcess for removing operating principles\nValues are not just things we do, but things that actively drive good behavior. When we remove them it doesnt mean we stopped believing in it, just that it wasnt actively helping to drive behavior. If we dont prune our operating principles, then we will be like every other company: things that make sense but are not leading to a better culture.\nTo\nremove\nan operating principle from the Handbook page, submit your change through a merge request and explain your reasons in the merge request description.\nThe GitLab Value Handbook Page owner must approve and merge the request.\nMention the specific value\nMost companies have a list of values. In companies without strong values, folks often use generalizations when they refer to values. For example, not a value add or scored well on values during our interview. In companies with strong values, folks name the specific, relevant value as it applies to a given topic or situation. Values are only powerful when they are individually understood and applied by team members.\nHow to scale the business while preserving GitLab values?\nFor certain business decisions or projects (such as\ncompensation\nand\nend-point management\n), GitLab team members may have a lot of opinions and interest,\nand they want to provide their feedback and comments.\nOn the other hand, it might be challenging for the project DRI to digest and respond to all these inputs.\nWhat should you do in this scenario?\nEveryone can contribute at GitLab.\nWe encourage team members to share feedback and leave comments on issues.\nLeaving feedback and comments shows that team members care about a topic and about GitLab as a company.\nThese perspectives may also uncover potential risks and problems in the project.\nThere shouldnt be a\nDont they have their job to do?\ntype of response.\nFurthermore, we shouldnt judge team members who are perceived as being the squeaky wheel.\nAt GitLab, we\nmeasure impact, not activity\n.\nAs long as a team member is producing required results, they are empowered to decide how to spend their time.\nOn the other hand, as GitLab grows in size, we need to make decisions and the decisions may not be agreed to by everyone.\nIf a decision or project is sensitive or controversial, and receives large amounts of feedback, it can be challenging for the project DRI to handle.\nIn these cases, its best to have time-boxed feedback built into timelines.\nIn a hypothetical example where a DRI needs to decide between red and gold potatoes for a stew, they would create an issue with the following sentiment:\nWere deciding between red potatoes and gold potatoes to go into the stew. We have to decide by Tuesday 2020-07-14 so that we can get our order to the grocery store on Wednesday 2020-07-15. Well be collecting input and feedback until that point. Jane is the DRI and will make the decision on 2020-07-14 with all the information we have at that point. Here is the framework were using for the decision:\nare there allergies to consider?\ncost per pound\nteam member preferences\nOnce the decision is made, it will be what is going into the stew.\nThis method\nhas shown itself to be effective\nat soliciting productive feedback that doesnt derail a timeline while ensuring team members feel heard.\nWhy our values are public\nCompanies are encouraged to copy and implement GitLabs values. They are Creative Commons and can be copied verbatim.\nWe make our values public for\nmany reasons\n. There is great power and efficiency in teams who share company values. Concealing values until\nafter\nsomeone is hired into an organization is not a wise strategy.\nNot everyone will see our values and feel aligned with them, and thats OK. By making values public, it shows respect for the time of job seekers who conduct due diligence on prospective employers. When people who\nare\naligned with GitLabs values apply for an\nopen vacancy\n, this allows our hiring teams to more efficiently move candidates through the\ninterview process\n.\nIn a\nGitLab Unfiltered interview on values\n, GitLab co-founder Sid Sijbrandij offers the following context.\nCompanies may ask you to write a blank check. Theyll say, Come join our organization, and when youre here, you need to subscribe to our values, our way of working, and our strategy. Its very essential, and its part of our identity!\nBut these companies dont give you the opportunity up front to evaluate it. It doesnt make any sense to me. If its so important that people share your values, have them out there.\nHierarchy\nOccasionally, values can contradict each other. Its useful to keep in mind this hierarchy to resolve confusion about what to do in a specific circumstance, while remaining consistent with our core values.\nThink of the hierarchy as a weighting system. Values higher in the hierarchy do not automatically override values lower in the hierarchy. Here are some examples:\nIf a change impacts Transparency positively but impacts Efficiency negatively in roughly the same amount, we would move ahead since Transparency is higher in the hierarchy than Efficiency.\nIf a change has a massive positive impact on Diversity but negatively impacts Iteration, we would move ahead even though Diversity is lower in the hierarchy than Iteration because the overall impact is more positive than negative.\nIn a\nGitLab Unfiltered interview on values\n, GitLab co-founder Sid Sijbrandij offers the following context.\nIts an attempt to relieve at least some of the tension. Its not absolute. If you think of values as binary, thats not going to work. There will always be interpretation, and theres always magnitude to consider.\nWe made a hierarchy so that its clear, in the end, the result matters most. For instance, were not going to be transparent for the sake of being transparent. Were not radical in our transparency. We do it because we think it will lead to better outcomes.\nThose hierarchies are really important. They wont preempt every debate, but it helps.\nUpdating our values\nOur values are updated frequently and as needed. Everyone is welcome to make a suggestion to improve them. To update: make a merge request and assign it to the CEO. If youre a\nteam member\nor in the\ncore team\nplease post a link to the MR in the\n#values\nSlack channel\n. If youre not part of those groups, please send a direct X/Twitter message to\n@sytses\n.\nHow do we reinforce our values\nWhatever behavior you reward will become your values. We reinforce our values by:\nCriteria we use for\npromotions\nand communicate to the whole company on announcement.\nWhat we select for during\nhiring\n.\nWhat we emphasize during\non-boarding\n.\nCriteria we use for our\nannual compensation review\n.\nWhat we refer to when\nmaking decisions\n.\nThe example the E-group sets for the company since\na fish rots from the head down\n.\nWhat we expect from all team members, as\nambassadors for our values\n.\nKeeping them\nup to date\nwith a\nstream of commits that add details\n.\nBehavior we give each other\n360 feedback\non.\nBehavior we\ncompliment\n.\nCriteria we use for\ndiscretionary bonuses\n.\nWhat we include in our\noffer letters\nCriteria we use to\nmanage underperformance\n.\nWhat we do when we\nlet people go\n.\nGiving value awards during\nGitLab Summit\n.\nProviding GitLab team members and\nqualified individuals\ntransparency into all aspects of the company through the\nCEO Shadow Program\nto enable them to better engage and collaborate cross-functionally.\nLinking the takeaways of courses to our values, like we did for\nthe Crucial Conversations training\n.\nThe default settings of the software we use (for example:\nSpeedy meetings\n,\ndocument sharing\n, agendas, etc.)\nReinforcing our values with features in GitLab, for example the\nIterations feature\n.\nApplying one of our\nvalues virtual backgrounds\nin video calls.\nOur GitLab\nSong Book\n, the song lyrics often mention GitLab values.\nRegularly conduct a values exercise at the\ne-group offsite\n.\nThe most important moments to reinforce our values are decisions which affect individual team members most: hiring, promotions, and bonuses, which is why every promotion document at GitLab is shared with the entire company and uses the values as its core structure.\nIn negative feedback, we should be specific about what the problem is. For example, saying someone is \nnot living the values\n isnt helpful.\nYour values are what you hire for, what you praise people for, and what you promote them for. By definition, what you do in those instances\nare\nyour values. Its not what you say they are. Values should be explicitly part of our\nhiring\nprocess, our job profiles, and our\nreview process\n.\nWhen we give\nbonuses\nand\npromotions\n, they are always linked to values. Thats the crucial thing. If you reinforce them there, thats the most powerful thing you can do. \nSid Sijbrandij, GitLab co-founder\nWhat to do if values arent being lived out\nValue erosion can occur when indifference and apathy are tolerated. It can also occur when individuals justify undesired behaviors by interpreting values as me values rather than company values. For example, a team member may speak to the importance of personal efficiency in order to justify not collaborating professionally with peers. This is not what we expect from team members in terms of efficiency and collaboration.\nIf you feel that values are not being lived out in a given scenario, speak up and ask for context in a respectful manner. Navigating value conflicts starts with\nassuming positive intent\nfrom other team members. Offer links to relevant values and/or operating principles when discussing the issue. If there is confusion or disagreement about the interpretation of a value, please surface the discussion in GitLabs\n#values\nSlack channel\n(for GitLab team members) or @-mentioning\n@gitlab\non X/Twitter (for those who do not work at GitLab).\nIn a\nGitLab Unfiltered interview on values\n, GitLab co-founder Sid Sijbrandij offers the following context.\nAlmost every time we face a hard decision at GitLab, its because values are in conflict. Its not binary logic. It requires conversation, and sometimes there is no obvious answer. We can only achieve resolution by respectfully talking with each other and trusting the DRI to make the ultimate decision.\nPermission to play\nFrom our values we excluded some behaviors that are obvious; we call them our\npermission to play\nbehavior:\nBe truthful and honest.\nBe dependable and reliable.\nTry to keep promises. If you might not keep a promise, proactively communicate as soon as you suspect it.\nBe deserving of the trust of our team members, users and customers.\nBe committed to the success of the whole organization.\nAct in the best interest of the company, our team members, our customers, users, and investors.\nMake the best decisions for GitLab.\nAct in accordance with the law.\nDont show favoritism as\nit breeds resentment, destroys employee morale, and creates disincentives for good performance\n. Seek out ways to be fair to everyone.\nPlaying politics is counter to GitLab values\nWe dont want people to play politics at GitLab.\nAn example of politics is people discussing a proposal and being overly focused on whose proposal it is.\nThis is a manifestation of the\nBelief Bias\n, where we judge an arguments strength not by how strongly it supports the conclusion but by how strongly\nwe\nsupport the conclusion.\nProposals should be weighed on their merits and not on who proposed them.\nAnother example is people being promoted based on others liking them or having a lot of alliances. We want people to be promoted based on their results. We value collaboration, but thats different from being promoted just because people like you.\nBelow are some attributes of political and non-political work environments. GitLab plans to maintain a non-political one.\nPolitical environment\nNon-political environment\nValues are weaponized and used out of their intended context\nTeam members utilize values with a positive intent\nTeam members are driven by self-interest\nTeam members are driven by company interest\nTeam members work in silos\nTeam members optimize globally\nPeople have territorial behaviors and are quick to perceive suggestions as attacks\nPeople have\nshort toes\nPeople have unhealthy alliances with backroom conversations\nPeople have good intent and actively collaborate with folks\nInformation is intentionally withheld\nInformation is shared early (often WIP) and at the same time with all interested parties\nPeople try to undermine each others credibility by arguing with the weakest part of their argument\nPeople take a\nsteel man position\nand argue against the strongest version of your opponents position\nFolks do not provide direct feedback. Instead, they withhold their thoughts or speak behind each others backs\nFeedback is given directly. This includes feedback about a managers team\nCommunicating your own suggestions through a report instead of directly\nFeedback is given directly from the person who has it\nEvaluating proposals or work by who said or did it instead of by what is in it\nProposals and work is evaluated without regard to who worked on them\nLack of transparency in escalations. Team members go to a manager without first attempting to align with peers on an issue or letting peers know\nTeam members speak directly to each other about feedback and requests in order to resolve their own conflicts. When they escalate,\nthey do it in an effective way\nValues make choices\nValues make and clarify choices. A well-chosen value has a defensible opposite. Apple, for example, values secrecy over transparency and product perfection over iteration. They are successful building around our counter values although the result is a very different company.\nWhat is not a value\nAll-remote\nisnt a value. It is something we do because it helps to\npractice our values\nof transparency, efficiency, results, and diversity, inclusion & belonging.\nQuestions from new team members\nDuring every\nGitLab 101 session with new hires\nwe discuss our values. We document the questions and answers to\nFrequently Asked Questions about the GitLab Culture\n.\nNew team members should read\nGitLabs guide to starting a new remote role\n, and reference\ninterviews\ncentered on values within the\nGitLab Unfiltered YouTube channel\n.\nMission\nOur\nmission\nis to\nenable everyone to contribute to and co-create the software that powers our world\n. This mission guides our path, and we live our values along that path.\nMitigating Concerns\nWe have a page which documents our\nMitigating Concerns\n. Many of our values help to mitigate some of these concerns.\nLast modified September 2, 2025:\nUpdate IR links to page (\nc66630ed\n)\nView page source\n-\nEdit this page\n-\nplease\ncontribute\n.",
  "metadata": {
    "url": "https://handbook.gitlab.com/handbook/values",
    "title": "GitLab Values | The GitLab Handbook",
    "scraped_at": "2025-10-26T20:50:01.538981",
    "content_length": 114246,
    "section": "handbook"
  },
  "processing": {
    "original_length": 114246,
    "cleaned_length": 113867,
    "cleaned_at": "2025-10-27T16:13:42.440961",
    "processor": "text_cleaner_v1",
    "word_count": 18550
  }
}