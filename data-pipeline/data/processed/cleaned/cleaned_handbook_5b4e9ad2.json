{
  "content": "Engineering\nThe GitLab Product team\nlooks ahead for expanding the platform What\" (customer needs) and Why (business strategy) and Engineering determines the How (technical implementation) and When (scheduling) of the platform releases. The content on this page talks about how we do engineering at GitLab.\nEngineering Direction\nGitLab has a Three-Year Strategy, and were excited to see every member of the Engineering division contribute to achieving it. Whether youre creating something new or improving something that already exists, we want you to feel empowered to bring your best ideas for influencing the product direction through improved scalability, usability, resilience, and system architectures. And when you feel like you need to expand your knowledge in a particular area, know that youre supported in having the resources to learn and improve your skills.\nOur focus is to make sure that GitLab is enterprise grade in all its abilities and to support the AI efforts required to successfully launch AI features to General Availability.\nMaking sure that GitLab is enterprise grade involves several teams collaborating on improving our disaster recovery and support offerings through ongoing work with GitLab Dedicated and Cells infrastructure. Our goal here is improved availability and service recovery.\nEngineering Culture\nEngineering culture at GitLab encompasses the processes, workflows, principles\nand priorities that all stem from our\nGitLab Values\n.\nAll these things continuously strengthen our engineering craftsmanship and\nallow engineers to achieve engineering excellence, while growing and having a\nsignificant, positive impact on the product, people, and the company as a whole.\nOur engineering culture is primarily being carried and evolves through\nknowledge sharing and collaboration. Everyone can be part of this process\nbecause at GitLab everyone can contribute.\nEngineering Excellence\nEngineering excellence can be defined as an intrinsic motivation to improve\nengineering efficiency, software quality, and deliver better results while\nbuilding software products. Engineering excellence is being fueled by a strong\nengineering culture combined with a mission: to build better software that\nallows everyone to contribute.\nEngineering Initiatives\nEngineering is the primary advocate for the performance, availability, and security of the GitLab project. Product Management prioritizes 60% of engineering time, so everyone in the engineering function should participate in the Product Management\nprioritization process\nto ensure that our project stays ahead in these areas. Engineering prioritizes 40% of time on initiatives that improve the product, underlying platform, and foundational technologies we use.\nWork in the 40% time budget should be coordinated and prioritized by the Engineering Manager of a team. Use the label\nEngineering Time\nfor issues and MRs that are done as part of it so we can follow the work and the results across the engineering division.\nContributing to broad engineering initiatives and participating in working group-related tasks.\nReview fixes from our support team. These merge requests are tagged with the\nSupport Team Contributions\nlabel. You can\nfilter on open MRs\n.\nWorking on high priority issues as a result of\nissue triaging\n. This is our commitment to the community and we need to include some capacity to review MRs or work on defects raised by the community.\nImprovements to the performance, stability and scalability of a feature or dependency including underlying infrastructure. Again, the Product team should be involved in the definition of these issues but Engineering may lead here by planning, prioritizing, and coordinating the recommended improvements.\nImprovements and upgrades to our toolchain in order to boost efficiency.\nCodebase improvements: Removing technical debt, updating or replacing outdated dependencies, and enhancing logging and monitoring capabilities.\nConstructing Proof-of-Concept models for thorough exploration of new technologies, enhancements and new possibilites.\nWork on improvements and feature enhancements to the product, in the sense of internal community contributions, that would increase our internal engineering productivity by focusing on ready-to-go items that are currently assigned a low priority in the backlog.\nEngineering Innovation\nEngineering Innovation is a new process geared toward individual or small-team collaboration that encourages engineers to explore new ideas and Proof-of-Concepts. These projects are typically lean, time-boxed, iterative, and designed to validate whether an idea has the potential to evolve into a viable experimental feature or product. See the\nInnovation at GitLab Guide\n.\nTechnical Roadmaps\nSome of the above examples for the 40% time budget can help in forming a long-term technical roadmap for your group, and determine how best to prioritize your technical work to support overall business goals. In addition to the examples above:\nAsk yourself these questions\nWhat are your most frequent sources of delays? (Could be long-standing tech debt you have to work past while developing, could be lack of reviewers for your domain, could be external to your team like with pipeline duration)\nDo you have any consistently similar bugs or security issues that come in due to a certain area?\nHas your team been talking about potentially refactoring any areas?\nIs your team struggling with certain processes?\nHave you had recent incidents that allude to a larger problem?\nAre you getting frequent requests for help in some area?\nIs your team frequently missing their deliverable commitments? What would help?\nDoes your area have performance (slow endpoints, inconsistent responses, intermittent errors) or scalability (the feature or area as-is will not scale) concerns?\nWhere do you see the biggest instability? Have you talked to operations and support about feedback for your area?\nDo you have application or rate limits in the right places?\nHave you burned down your security, corrective action, and infradev issues?\nIs your error budget green?\nHave your feature flags been removed from the codebase yet?\nDo you have adequate unit test, integration test and E2E coverage?\nDo you have adequate documentation for your features?\nDo you have adequate telemetry, logging, monitoring of your features?\nDo you have adequate error handling and error codes that allows fast and easy diagnostics?\nGather data like this\nMaster:Broken issues\nseverity::1 and severity::2 bugs\nMissed-Slo issues\nFlaky test issues\ntype::maintenance issues\nThink about the future state of your product\nWhere do you want your product to be this time next year?\nWhat are the technical requirements to achieve that?\nWhat are technical topics that would benefit from research/POCs?\nWhat would make it easier for you to achieve that if it was no longer a factor?\nWhat would be the performance and/or business impact once you address these issues?\nHow would you evolve your team processes to regularly review your technical roadmap?\nTechnical roadmap process\nEngineering Managers (EMs) are responsible for collaboratively developing their teams technical roadmap backlog. All items should be documented as epics and issues using the Technical Roadmap label.\nGlobal initiatives will be defined and must be incorporated into each groups roadmap and prioritization (e.g., allocating 40% of front-end capacity for Vue upgrade, completing all Cells issues for a specific area by milestone XYZ).\nPrioritization of items should align with:\nGeneral business goals\nEngineering vision\nTeam capacity and expertise\nPlanning Guidelines:\nAllocate 40% of the overall time budget for technical roadmap items in the normal milestone planning process.\nUse the Technical roadmap label for all related issues to facilitate tracking and coordination.\nKey Steps:\nIdentify and document technical debt and improvement opportunities\nAssess impact and effort for each item\nPrioritize based on business value and strategic alignment\nIntegrate with existing iteration/milestone planning\nRegularly review and adjust the roadmap\nThis process ensures a balanced approach between feature development and technical improvements, promoting long-term sustainability and efficiency of the engineering organization.\nCommunity Contributions\nWe have a 3-year goal of\nreaching 1,000 monthly contributors\nas a way to mature new stages, add customer-desired features that arent on our roadmap, and even translate our product into multiple languages.\nDiversity\nDiverse teams perform better\n. They provide a sense of belonging that leads to higher levels of trust, better decision making, and a larger talent pool.\nThey also focus more on facts, process facts more carefully, and are more innovative\n. By hiring globally and increasing the numbers of women and under represented groups (URGs) in the Engineering division, were helping everyone bring their best selves to work.\nGrowing our team\nStrategic hiring is a top priority, and were excited to continue hiring people who are passionate about our product and have the skills to make it the best DevSecOps tool in the market. Our current focus areas include reducing the amount of time between offer and start dates and hiring a diverse team (see\nabove\n). Were also implementing industry-standard approaches like structured, behavioral, and situational interviewing to help ensure a consistent interview process that helps to identify the best candidate for every role. Were excited to have a recruiting org to partner with as we balance the time that managers spend recruiting against the time they spend investing in their current team members.\nExpand customer focus through depth and stability\nAs expected, a large part of our focus is on improving our product.\nFor\nEnterprise customers\n, were refining our product to meet the levels of security and reliability that customers rightfully demand from SaaS platforms\n(SaaS Reliability)\n. Were also providing more robust utilization metrics to help them discover features relevant to their own DevOps transformations\n(Usage Reporting)\nand offering the ability to purchase and manage licenses without spending time contacting Sales or Support\n(E-Commerce and Cloud Licensing)\n. Lastly, in response to Enterprise customer requests, were adding features to support Suggested Reviewers, better portfolio management through Work Items, and Audit Events that provide additional visibility into user passive actions.\nFor\nFree Users\n, were becoming more efficient with our open core offering, so that we can continue to support and give back to students, startups, educational institutions, open source projects, GitLab contributors, and nonprofits.\nFor\nFederal Agencies\n, were obtaining FedRAMP certification to strengthen confidence in the security standards required on our SaaS offering. This is a mandated prerequisite for United States federal agencies to use our product.\nFor\nHosted Customers\n, were supporting feature parity between Self-Managed and GitLab Hosted environments through the Workspace initiative. Were also launching GitLab Dedicated for customers who want the flexibility of cloud with the security and performance of a single-tenant environment.\nFor customers using\nCI/CD\n, were expanding the available types of Runners to include macOS, Linux/Docker, and Windows, and were autoscaling build agents.\nTaking time off\nNote:\nThis process is expected for PTO that is five consecutive days or more, inclusive of adjacent public holidays (excluding weekend days). For PTO that is fewer than five consecutive days, including the cases where there are multiple PTO blocks with fewer than 5 consecutive days and a few working days in-between, a coverage issue is not required but a coverage issue can be filed for PTO of any length, especially if itd be helpful to balance team continuity and individual flexibility.\nIn order to ensure business continuity, and deliver on commitments; the Engineering Division is adopting a PTO Coverage Issue Process. Processes like this are already formalized in GitLab (e.g.\nPM Coverage Issue\n) and some teams within Engineering have practiced this regularly at the Management+ level. This allows us to continue to support team member well-being through time away without negatively impacting the rest of the team.\nA PTO Coverage issue is required for\njob grades 8 and up\n. For job grades 7 and below a PTO Coverage issue is recommended as there is value in going through the process of creating the PTO Coverage issue even if there are minimal items to include (for all levels) in that it forces you to think about what you have on your plate and what impact your PTO will have on those items. So whether the result is that the work waits or there is someone designated as a replacement DRI, it makes the decision explicit and documented.\nOnce planning for a milestone has been completed (see\nMonday, 5 days before the milestone begins\n) PTO for periods longer than 5 consecutive days, inclusive of adjacent public holidays (excluding weekend days), cannot be requested. This is to prevent disrupting plans for that milestone. There are exceptions to this, but all need to be discussed with your manager. Examples include:\nurgent scenarios\na team/individual hits targets earlier in the milestone (\nwe measure impact, not activity\n)\na strong need for a team member to take PTO of this length\nThese issues will help inform teams as they plan their milestones to ensure the work teams are committed to can be achieved with the staff available, or if there will be a lack of staff to achieve those commitments, to work with team members to see what can be done to achieve the results for our customers.\nThe process below helps to clarify and expand upon the\nFlexible PTO Policy\nby making the coordination with the team members manager explicit.\n1. Creating an Engineering coverage issue\nYou should use\nthis issue template\nto define handshake responsibilities. For extended leave, it is important to find one or more Directly Responsible Individuals (DRIs) that will be able to make decisions while you are away. This may be your manager, another engineer, or maybe the Product Manager for your team. The coverage issue should contain all the necessary information for the DRIs to make good decisions in your absence, so please make sure to include as much detail as needed. The coverage issue should highlight work impact estimates, mitigations identified, and coverage alternatives.\nIf additional context needs to be shared to provide color to the coverage issue, you can consider a specific handover meeting to cover further details.\nIt is recommended to work with your manager and other stakeholders when considering cross-functional teammate capacity for a coverage task assignment. For example, while its optimal for PM, EM, and PDs to assist in covering for each other given their shared knowledge of their product area including customers and users, PM teammates may or may not have the bandwidth or expertise to take on covering engineering specific responsibilities. Alternatively, it may be better for the manager of the engineer or another engineer in the same stage to aid in coverage. Plan to have the necessary conversations across teams and managers.\n2. Sharing your Engineering coverage issue with your manager\nOnce youve filed your engineering coverage issue, share this with your manager prior to milestone planning so they can review and approve. Check the\nlatest guidance in our PTO policy\non how much notice is required.\nConsider whether any new commitments would be affected by your planned PTO. If a team member falls behind on something, they will need to make sure they have a coverage plan in place to ensure success of their commitments.\n3. Manager reviews coverage issue\nOnce the team member has shared their coverage issue with their manager, the manager will review the coverage issue and validate assumptions with stakeholders or impacted project DRIs as needed.\nThe manager will make a decision on approval or discuss different arrangements or other contingency plans. Once the manager ticks their box on the coverage issue approving the leave, enter the time off into Workday.\n4. Communicate your time off\nAfter team members coverage issue is approved, team members will\ncommunicate their time off\nand enter the PTO into Deel/Workday including a link to their coverage issue. Team members will share their coverage issue with their relevant colleagues via Slack channels, GitLab status, etc. ahead of the milestone planning.\n5. Take your time off\nPlease disconnect and take the time off that you need!\n6. Returning from Time Off\nReturning from time off can be overwhelming and daunting. You should work with your DRIs to understand what has changed during your absence and what the current priorities are. Also, communicate transparently that your response time may be slower because you are catching up. Here are some additional tips on\nhow to return back to work after time off\n.\nEngineering Departments\nThere are five departments within the Engineering Division:\nDevOps Engineering Department\nAI Engineering Department\nSec Department\nInfrastructure Platforms\nSupport Engineering Department\nOther Related Pages\nCTO Leadership Team\nStrategic Priority Codes\nDatabase Engineering\nDevelopment Principles\nEngineering Automation\nEngineering Metrics\nEngineering READMEs\nFrequently Used Projects\nGitLab Innovation Program\n, managed by the GitLab Legal Team\nHiring\nMentorship\nPajamas Design System\nR&D Tax Credit Applications\nWorkflows\nDeveloper onboarding\nEngineering Demo Process\nEngineering Workflow\nCode Review\nSecurity Issues\nArchitecture Design\nGitLab Repositories\nIssue Triage Policies\nContributing to Go projects\nWider Community Merge Request Triage Policies\nRoot Cause Analysis\nUnplanned Critical Patch releases\nIncident Management\nGitLab in Production\nWorkflow Diagram\nError Budgets\nPerformance of GitLab\nMonitoring of GitLab.com\nProduction Readiness Guide\nPeople Management\nEngineering Career Development\nEngineering Career Mobility Principles\nEmerging Talent @ GitLab\nEngineering Management\nCross-Functional Prioritization\nSee the\nCross-Functional Prioritization page\nfor more information.\nSaaS Availability Weekly Standup\nTo maintain high availability, Engineering runs a weekly SaaS Availability standup to:\nReview high severity (S1/S2) public facing incidents\nReview important SaaS metrics\nTrack progress of Corrective Actions\nTrack progress of Feature Change Locks\nInfrastructure Items\nEach week the Infrastructure team reports on incidents and key metrics. Updating these items at the top of the\nEngineering Allocation Meeting Agenda\nis the responsibility of the Engineering Manager for the\nGeneral Squad\nin Reliability.\nIncident Review\nInclude any\nS1 incidents\nthat have occurred since the previous meeting.\nInclude any incidents that required a\nstatus page\nupdate.\nSaaS Metrics Review\nInclude screenshots of the following graphs in the\nagenda\n.\nAlert Volume Review\nCorrective Actions\nDevelopment Items\nFor the core and expansion development departments, updates on current status of:\nError budgets\nReliability issues (infradev)\nSecurity issues\nGroups under Feature Change Locks should update progress synchronously or asynchronously in the weekly agenda.\nThe intention of this meeting is to communicate progress and to evaluate and prioritise escalations from infrastructure.\nFeature Change Locks progress reports should appear in the following format in the weekly agenda:\nFCL xxxx - [team name]\nFCL planning issue:\n\nIncident Issue:\n\nIncident Review Issue:\n\nIncident Timeline:\n\ne.g. time to detection, time to initiate/complete rollback (as applicable), time to mitigation\nCause of Incident\nMitigation\nStatus of Planned/completed work associated with FCL\nFeature Change Locks\nA Feature Change Lock (FCL) is a process to improve the reliability and availability of GitLab.com. We will enact an FCL anytime there is an S1 or public-facing (status page) S2 incident on GitLab.com (including the License App, CustomersDot, and Versions) determined to be caused by an engineering department change. The\nteam\ninvolved should be determined by the author, their line manager, and that managers other direct reports.\nIf the incident meets the above criteria, then the manager of the team is responsible for:\nForm the group of engineers working under the FCL. By default, it will be the whole team, but it could be a reduced group if there is not enough work for everyone.\nPlan and execute the FCL.\nInform their manager (e.g. Senior Manager / Director) that the team will focus efforts towards an FCL.\nProvides updates at the\nSaaS Availability Weekly Standup\n.\nIf the team believes there does not need to be an FCL, approval must be obtained from either the VP of Infrastructure or VP of Development.\nDirect reports involved in an active\nborrow\nshould be included if they were involved in the authorship or review of the change.\nThe purpose is to foster a sense of ownership and accountability amongst our teams, but this should not challenge our no-blame culture.\nTimeline\nRough guidance on timeline is provided here to set expectations and urgency for an FCL. We want to balance moving urgently with doing thoughtful important work to improve reliability. Note that as times shift we can adjust accordingly. The DRI of an FCL should pull in the timeline where possible.\nThe following bulleted list provides a suggested timeline starting from incident to completion of the FCL. Business day x in this case refers to the x business day after the incident.\nDay 0: Incident:\nBusiness day 1: relevant Engineering Director collaborates with VP of Development and/or VP of Infrastructure or their designee to establish if FCL is required.\nBusiness day 2: confirmation that an FCL is required for this incident and start planning.\nBusiness days 3-4: planning time\nBusiness days 5-9 (1 week): complete planned work\nBusiness days 10-11: closing ceremony, retrospective and report back to standup\nActivities\nDuring the FCL, the team(s) exclusive focus is around\nreliability work\n, and any feature type of work in-flight has to be paused or re-assigned. Maintainer duties can still be done during this period and should keep other teams moving forward. Explicitly higher priority work such as security and data loss prevention should continue as well. The team(s) must:\nCreate a public slack channel called\n#fcl-incident-[number]\n, with members\nThe Teams Manager\nThe Author and their teammates\nThe Product Manager, the stages Product leader, and the sections Product leader\nAll reviewer(s)\nAll maintainers(s)\nInfrastructure Stable counterpart\nThe chain-of-command from the manager to the VP (Sr Manager, Sr/Director, VP, etc)\nCreate an\nFCL issue\nin the\nFCL Project\nwith the information below in the description:\nName the issue:\n[Group Name] FCL for Incident ####\nLinks to the incident, original change, and slack channel\nFCL Timeline\nList of work items\nComplete the written Incident Review documentation within the Incident Issue as the first priority after the incident is resolved. The Incident Review must include completing all fields in the Incident Review section of the incident issue (see\nincident issue template\n). The incident issue should serve as the single source of truth for this information, unless a linked confidential issue is required. Completing it should create a common understanding of the problem space and set a shared direction for the work that needs to be completed.\nSee that not only all procedures were followed but also how improvements to procedures could have prevented it\nA work plan referencing all the Issues, Epics, and/or involved MRs must be created and used to identify the scope of work for the FCL. The work plan itself should be an Issue or Epic.\nDaily - add an update comment in your FCL issue or epic using the template:\nExec-level summary\nTarget End Date\nHighlights/lowlights\nAdd an agenda item in the\nSaaS Availability weekly standup\nand summarize status each week that the FCL remains open.\nHold a synchronous\nclosing ceremony\nupon completing the FCL to review the retrospectives and celebrate the learnings.\nAll FCL stakeholders and participants shall attend or participate async. Managers of the groups participating in the FCL, including Sr. EMs and Directors should be invited.\nAgenda includes reviewing FCL retrospective notes and sharing learnings about improving code change quality and reducing risk of availability.\nOutcome includes\nhandbook\nand\nGitLab Docs\nupdates where applicable.\nScope of work during FCL\nAfter the Incident Review is completed, the team(s) focus is on preventing similar problems from recurring and improving detection. This should include, but is not limited to:\nAddress immediate corrective actions to prevent incident reoccurrence in the short term\nIntroduce changes to reduce incident detection time (improve collected metrics, service level monitoring, which users are impacted)\nIntroduce changes to reduce mitigation time (improve rollout process through feature flags, and clean rollbacks)\nEnsure that the incident is reproducible in environments outside of production (Detect issues in staging, increase end-to-end integration test coverage)\nImprove development test coverage to detect problems (Harden unit testing, make it simpler to detect problems during reviews)\nCreate issues with general process improvements or asks for other teams\nExamples of this work include, but are not limited to:\nFixing items from the Incident Review which are identified as causal or contributing to the incident.\nImproving observability\nImproving unit test coverage\nAdding integration tests\nImproving service level monitoring\nImproving symmetry of pre-production environments\nImproving the\nGitLab Performance Tool\nAdding mock data to tests or environments\nMaking process improvements\nPopulating their backlog with further reliability work\nSecurity work\nImprove communication and workflows with other teams or counterparts\nAny work for the specific team kicked off during this period must be completed, even if it takes longer than the duration of the FCL. Any work directly related to the incident should be kicked off and completed even if the FCL is over. Work paused due to the FCL should be the priority to resume after the FCL is over. Items created for other teams or on a global level dont affect the end of the FCL.\nA stable counterpart from Infrastructure will be available to review and consult on the work plan for Development Department FCLs. Infrastructure FCLs will be evaluated by an Infrastructure Director.\nEngineering Performance Indicator process\nThe\nProduct Analytics team\nis responsible for maintaining Engineering Performance Indicators. Work regarding KPI / RPI is tracked using the\nProduct Analytics task intake tracker\n.\nManual verification\nWe manually verify that our code works as expected.\nAutomated test coverage is essential,\nbut manual verification provides a higher level of confidence that features behave as intended and bugs are fixed.\nWe manually verify issues when they are in the\nworkflow::verification\nstate.\nGenerally, after you have manually verified something, you can close the associated issue.\nSee the\nProduct Development Flow\nto learn more about this issue state.\nWe manually verify in the staging environment whenever possible.\nIn certain cases we may need to manually verify in the production environment.\nIf you need to test features that are built for GitLab Ultimate then you can get added to the\nissue-reproduce\ngroup on production and staging environments by asking in the\n#development\nSlack channel.\nThese groups are on an Ultimate plan.\nCritical Customer Escalations\nWe follow the below process when existing\ncritical customer escalations\nrequires immediate scheduling of bug fixes or development effort.\nRequirements for critical escalation\nCustomer is in\ncritical escalation\nstate\nThe issues escalated have critical business impact to the customer, determined by Customer Success and Support Engineering leadership\nFailure to expedite scheduling may have cascading business impact to GitLab\nApproval from a VP from Customer Success AND a Director of Support Engineering are required to expedite scheduling\nCustomer Success: approval from VP, Customer Success Management -\nSherrod Patching\nSupport Engineering: approval from VP, Support -\nJohnny Scarborough\nProcess\nThe issue priority is set to\n\"priority::1\"\nregardless of severity\nThe label\n\"critical-customer-escalation\"\nis applied to the issue\nThe issue is scheduled within 1 business day\nFor issues of type features, approval from the Product DRI is needed.\nThe DRI or their delegate provides daily process updates in the escalated customer slack channel\nDRI\nIf issue is type bug DRI is the Director of Development\nIf issue is type feature DRI is the Director of Product\nIf issue requires Infrastructure work the DRI is the Engineering Manager in Infrastructure\nThe DRI can use the\ncustomer critical merge requests\nprocess to expedite code review & merge.\nPairing Engineers on priority::1/severity::1 Issues\nIn most cases, a single engineer and maintainer review are adequate to handle a priority::1/severity::1 issue. However, some issues are highly difficult or complicated. Engineers should treat these issues with a high sense of urgency. For a complicated priority::1/severity::1 issue, multiple engineers should be assigned based on the level of complexity. The issue description should include the team member and their responsibilities.\nTeam Member\nResponsibility\nTeam Member 1\nReproduce the Problem\nTeam Member 2\nAudit Code Base for other places where this may occur\nIf we have cases where three or five or X people are needed, Engineering Managers should feel the freedom to execute on a plan quickly.\nFollowing this procedure will:\nDecrease the time it takes to resolve priority::1/severity::1 issues\nAllow for a smooth handover of the issue in case of OOO or End of the Work Day\nProvide support for Engineers if they are stuck on a problem\nProvide another set of eyes on topics with high urgency or securing security-related fixes\nInternal Engineering handbook\nThere are some engineering handbook topics that are\ninternal only\n. These topics can be viewed by GitLab team members in the\nengineering section of the internal handbook\n.\nAI Engineering\nVision Our goal is not merely to launch features, but to ensure they land successfully and provide...\nAnalytics Stage\nThe Analytics Stage is responsible providing observability and response features.\nArchitecture\nComplexity at Scale As GitLab grows, through the introduction of new features and improvements on...\nCross Functional Prioritization\nOverview The Cross-Functional Prioritization framework exists to give everyone a voice (PM,...\nCTO Leadership Team\nThe CTO Leadership Team is composed of the CTOs direct reports and the Office of the CTO...\nData Frameworks Stage\nThe Data Frameworks is responsible is responsible for providing frameworks and tools that ensure healthy operational data in the platform.\nDeployments and Releases\nOverview and terminology This page describes the deployment and release approach used to deliver...\nDeveloper Onboarding\nAwesome! You're about to become a GitLab developer! Here you'll find everything you need to start developing.\nDevelopment\nDevelopment Department Learning and Development\nResources Secure coding best practices It is important that all developers are aware of secure...\nDevOps Engineering\nVision Our goal is not merely to launch features, but to ensure they land successfully and provide...\nEngineering Career Development\nThe Three Components of Career Development There are three important components of developing...\nEngineering Communication\nCommunication GitLab Engineering values clear, concise, transparent, asynchronous, and frequent...\nEngineering Demo Process\nOccasionally, it is useful to set up a demo on a regular cadence to ensure cross-functional...\nEngineering Error Budgets\nThe error budget provides a clear, objective metric that determines how unreliable the service is allowed to be within a single quarter.\nEngineering Hiring\nOverview Hiring is a cornerstone of success for our engineering organization, contributing to our...\nEngineering IC Leadership\nEngineering IC Leadership at GitLab: going beyond Senior level At GitLab, it is expected that...\nEngineering Management\nHow Engineering Management Works at GitLab At GitLab, we promote two paths for leadership in...\nEngineering Mentorship\nMentorship, Coaching and Engineering Programs Senior Leaders in Engineering The 7CTOs Program is run...\nEngineering Projects\nName Location about.gitlab.com gitlab-com/marketing/digital-experience/about-gitlab-com AI Gateway...\nEngineering Team Readmes\nEngineering Workflow\nThis document explains the workflow for anyone working with issues in GitLab Inc.\nFast Boot\nA Fast Boot is an event that gathers the members of a team or group in one physical location to work...\nFrontend Group\nTeams Create Analytics Plan Secure Verify and Release Frontend domain experts You can find engineers...\nGitLab Releases\nLooking for product release information? See release posts, releases page, Whats new,...\nGitLab Repositories\nGitLab consists of many subprojects. A curated list of GitLab projects can be found at the GitLab...\nGuidelines for automation and access tokens\nGuidelines for automation with project/group tokens or service accounts\nIncident\nDefinition of an Incident The definition of incident can vary widely among companies...\nInfrastructure\nGitLab Infrastructure\nInfrastructure Platforms\nThe Infrastructure Platforms department is responsible for the availability, reliability, performance, and scalability of GitLab SaaS Platforms and supporting services\nInnovation at GitLab\nThis guide serves as a comprehensive handbook for GitLab team members (engineers, product managers,...\nMonitoring of GitLab.com\nGitLab.com Service Availability The calculation methodology for GitLab.com Service Availability...\nOn-Call\nIf youre a GitLab team member and are looking to alert Reliability Engineering about an...\nOpen Source at GitLab\nWe believe in Open Source As a company, GitLab is dedicated to open source. Not only do we believe...\nPerformance\nPerformance Facets We categorize performance into 3 facets\nBackend Frontend Infrastructure Backend...\nPolicies related to GitLab.com\nThe handbook pages nested under policies directory are controlled documents, and...\nR&D Tax Credits\nGitLab submits applications for R&D Tax Credits in a number of jurisdictions that implement...\nRecognition in Engineering\nEngineering Quarterly Achievers Quarterly, CTO Leadership will recognize Engineering team members...\nRoot Cause Analysis\nAt GitLab transparency is one of our core values, as it helps create an open and honest working...\nStrategic Priority Codes\nStrategic Priority Codes - Prioritization System The Priority Code system provides a sophisticated...\nTesting\nWelcome to the Testing Guide. Pages in this section provides information about testing practices,...\nUnplanned Upgrade Stop Workflow\nAn unplanned upgrade stop is disruptive for customers as it requires to perform rollback and...\nLast modified September 25, 2025:\nMove Paid Time Off page to new Time Off Types page with redirects (\n43e92fe2\n)\nView page source\n-\nEdit this page\n-\nplease\ncontribute\n.",
  "metadata": {
    "url": "https://handbook.gitlab.com/handbook/engineering/",
    "title": "Engineering | The GitLab Handbook",
    "scraped_at": "2025-10-26T20:50:11.692867",
    "content_length": 35522,
    "section": "handbook"
  },
  "processing": {
    "original_length": 35522,
    "cleaned_length": 35397,
    "cleaned_at": "2025-10-27T16:13:42.699661",
    "processor": "text_cleaner_v1",
    "word_count": 5351
  }
}