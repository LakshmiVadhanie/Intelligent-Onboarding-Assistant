{
  "content": "Static Analysis Group Code Review Process\nOverview\nThis page documents the code review process utilized by the Static Analysis team.\nReviewer\nAll Static Analysis group members are expected to regularly participate in code reviews. This includes contributions from both GitLab Team Members and the wider community, as done as a part of our MR coach rotation.\nWhile all team members are encouraged to review merge requests, the ability to merge MRs and release changes is restricted to project maintainers.\nMaintainer\nTo quote from the\nEngineering Review Workflow\n:\nGreat engineers are often also great reviewers, but code review is a skill in and of itself and not every engineer, no matter their seniority, will have had the same opportunities to hone that skill. Its also important to note that a big part of being a good maintainer comes from knowing the existing product and codebase extremely well, which lets them spot inconsistencies, edge cases, or non-obvious interactions with other features that would otherwise be missed easily.\nTo protect and ensure the quality of the codebase and the product as a whole, people become maintainers only once they have convincingly demonstrated that their reviewing skills are at a comparable level to those of existing maintainers.\nAs with regular reviewers, maintainers can be found on the team page, or on the list of\nGitLab Engineering Projects\n.\nPath to maintainership\nBecoming a reviewer\nAll SAST BE Engineering team members are expected to review changes to the SAST analyzers. As part of the final steps of the onboarding process, the team member page should be updated to add the team member as a reviewer for each SAST analyzer.\nsecure-SAST-kics\n:\nreviewer\nsecure-SAST-kubesec\n:\nreviewer\nsecure-SAST-pmd-apex\n:\nreviewer\nsecure-SAST-security-code-scan\n:\nreviewer\nsecure-SAST-semgrep\n:\nreviewer\nsecure-SAST-sobelow\n:\nreviewer\nsecure-SAST-spotbugs\n:\nreviewer\nsecure-SAST-tracking-calculator\n:\nreviewer\nsecure-common-command\n:\nreviewer\nsecure-common-report\n:\nreviewer\nsecure-common-ruleset\n:\nreviewer\nPath to maintainership\nAll senior (and above) Backend engineers who contribute to any of the SAST analyzers are expected to pursue maintainership of all SAST analyzers, but becoming a maintainer is encouraged for all SAST engineers.\nAll maintainership approvals should be given by at least two existing maintainers.\nThere are two tiers of maintainership within SAST.\nTier 1\nSome analyzers are rarely updated; These include:\nkics\nkubesec\npmd-apex\nsecurity-code-scan\nsobelow\nspotbugs\nBecoming a maintainer on a project that is rarely updated can be tough since there are limited opportunities to contribute or review. In this case, contributions to other GitLab analyzers should be considered and granting of maintainership should be left to the existing maintainers discretion. The existing maintainer should document the reasons for approval, or if maintainership is denied, suggestions on which projects to contribute to should be given. When reviewing contributions, consideration should be given to contributions to issues within section-sec-request-for-help should also be included, even if these contributions did not result in an MR.\nTier 2\nThis tier of maintainership includes:\nSemgrep\nsast-rules\ntracking-calculator\nruleset\nThe granting of maintainership is down to the discretion of the two current maintainers approving the request, but an applicant must have a track record of contributions to the project. These contributions should demonstrate an understanding of the project and how changes to it could affect the monolith.\nReviewer mentorship program\nWe follow the same reviewer mentorship program as documented in the\nEngineering Review Workflow\n.\nGotchas\nThere are certain aspects to maintaining our Secure projects that require a critical eye. These are responsibilities that every reviewer within the team should be cognizant of and are expectations on the part of our maintainers. Some examples include:\nExecution of downstream pipelines prior to merge: this should occur automatically for members of\ngitlab-org\nbut require manual triggering for community contributions\nFailing pipelines must be fixed prior to tagging releases, see\nversioning and release process\nAnalyzers must be kept in sync with our CI templates. In certain cases the analyzer versions must be kept in sync, such as mobsf\nLast modified August 16, 2024:\nReplace aliases with redirects (\naf33af46\n)\nView page source\n-\nEdit this page\n-\nplease\ncontribute\n.",
  "metadata": {
    "url": "https://handbook.gitlab.com/handbook/engineering/development/sec/secure/static-analysis/code_review/",
    "title": "Static Analysis Group Code Review Process | The GitLab Handbook",
    "scraped_at": "2025-10-26T20:50:25.873762",
    "content_length": 4497,
    "section": "handbook"
  },
  "processing": {
    "original_length": 4497,
    "cleaned_length": 4495,
    "cleaned_at": "2025-10-27T16:13:42.641509",
    "processor": "text_cleaner_v1",
    "word_count": 675
  }
}