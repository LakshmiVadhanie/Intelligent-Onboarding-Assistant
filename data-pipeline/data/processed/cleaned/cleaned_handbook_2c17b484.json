{
  "content": "1Password and Environment Variables\nSecure secrets handling for local development\nSecrets used on laptops need to be stored and used securely. The reasons for\nthis and basic concepts are discussed\non the\n1Password page\n.\nIts recommended to read that first if you havent done so yet.\nThis page covers user-friendly ways to integrate these basic principles into your workflow.\nStandard command settings with aliases\nUsing an alias works well where a single, specific command should always use a\nsingle, specific set of secrets.\nFor example, you can define an alias in your shell profile to invoke\nglab\nwith your PAT:\nalias\nglab\n=\n\"op run --env-file=\n$HOME\n/.gitlab-pat.env -- glab\"\nTo verify the configuration, run\nglab api version\n. This should print\nthe version of gitlab.com if the configuration succeeded.\nglab api version\n{\n\"version\"\n:\n\"15.4.0-pre\"\n,\n\"revision\"\n:\n\"3e84f577d51\"\n}\nMulti-environment usage with.bashrc\nIf you have a number of environments that you use frequently you can create functions to easily load secrets for the correct environment.\nOne example of this is below. It adds a loadenv command to bash which automatically starts a subshell containing all the relevant environment variables,\nassuming the current directory is a git repository and an environment variable with a matching name is available in $HOME/devenv/envfiles.\nThe modified $PS1 checks for the presence of the ENVFILE variable, and if it exists displays it in the shell prompt to show what environment file is loaded in this shell.\n# Base PS1 + add ($ENVFILE) in red if set\nexport\nPS1\n=\n'[e]0;u@h: wa]${debian_chroot:+($debian_chroot)}[033[01;32m]u@h[033[00m]:[033[01;34m]w[033[00m]$([ -n \"$ENVFILE\" ] && echo -n \" e[91m($ENVFILE)e[0m\")$ '\nalias\nproject\n=\n\"git remote get-url origin  sed -e 's/.*///g'  sed -e 's/.git\n$\n//g'\"\n# Environment file load\nloadenv\n()\n{\nENVFILE\n=\n$(\nproject\n)\nop run --env-file\n=\n\"\n$HOME\n/devenv/envfiles/\n$(\nproject\n)\n.env\"\n--no-masking -- /bin/bash\n}\nWhen added to.bashrc and sourced, it can then be used to run commands like this:\nusername@my-laptop:/code$\ncd\nexample-project\nusername@my-laptop:/code/example-project$ loadenv\nusername@my-laptop:/code/example-project\n(\nexample-project\n)\n$ curl -X POST --form\ntoken\n=\n$PIPELINE_TOKEN\n--form\nref\n=\nmain https://gitlab.com/api/v4/projects/example-project/trigger/pipeline\n{\n\"id\"\n:1252595607,\n\"iid\"\n:12960,...long output removed...\nThen, once the secrets are no longer needed, you can exit the subshell and this\nwill be visible in the prompt.\nusername@my-laptop:/code/example-project\n(\nexample-project\n)\n$\nexit\nexit\nusername@my-laptop:/code/example-project$\nThis allows maintaining a set of standard variables for a given git repository, regardless of the exact command(s) being run.\nLast modified January 30, 2025:\nReplace ref links with regular links (\nc4c9b3d1\n)\nView page source\n-\nEdit this page\n-\nplease\ncontribute\n.",
  "metadata": {
    "url": "https://handbook.gitlab.com/handbook/tools-and-tips/onepassword-cli/",
    "title": "1Password and Environment Variables | The GitLab Handbook",
    "scraped_at": "2025-10-26T20:50:24.006464",
    "content_length": 2927,
    "section": "handbook"
  },
  "processing": {
    "original_length": 2927,
    "cleaned_length": 2884,
    "cleaned_at": "2025-10-27T16:13:42.569187",
    "processor": "text_cleaner_v1",
    "word_count": 428
  }
}